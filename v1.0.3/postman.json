{
    "item": [
        {
            "id": "e777073c-87cb-4a68-b812-0f75165f4bff",
            "name": "accounts",
            "item": [
                {
                    "id": "0710279f-4518-446e-813e-4af94be11a98",
                    "name": "Search accounts",
                    "request": {
                        "name": "Search accounts",
                        "description": {
                            "content": "Gets an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\nIf ``balance`` option is selected, the request must define the ``mosaicId`` filter.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by mosaic identifier.",
                                    "key": "mosaicId",
                                    "value": "<hex>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "5994d175-c763-4170-8f4c-890eb1124eb4",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"et moll\",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"addressHeight\": \"exercitation consequat\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"dolore nulla ex\",\n    \"accountType\": 0,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"eiusmod ut\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"proident qui est\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"cillum Lorem\",\n    \"importanceHeight\": \"cupidatat\"\n   }\n  },\n  {\n   \"id\": \"eiusmod \",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"addressHeight\": \"fugiat consectetur tempor\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"do dolore deserunt tempor\",\n    \"accountType\": 1,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"eu voluptate enim mollit sint\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"irure fugiat aliquip\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"enim incididunt ut dolore qui\",\n    \"importanceHeight\": \"sit reprehenderit ex\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -67265035,\n  \"pageSize\": 2667129\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5e2dc954-4428-4049-8c4f-3de5eb08005e",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a74550cc-cf44-413a-afab-5a449b062ac6",
                    "name": "Get accounts information",
                    "request": {
                        "name": "Get accounts information",
                        "description": {
                            "content": "Returns the account information for an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"publicKeys\": [\n        \"Duis pariatur mollit officia\",\n        \"nulla eiusmod cillum dolo\"\n    ],\n    \"addresses\": [\n        \"ut qui\",\n        \"nostrud ex laboris non\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "81377a31-5b46-4007-9d21-0acf3971d0a0",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"dolore fugiat sint est\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"addressHeight\": \"non dolor\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"Lorem ullamco non\",\n   \"accountType\": 1,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"sit ea tempor\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"ex\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"minim do aliquip\",\n   \"importanceHeight\": \"id Ut ut amet\"\n  }\n },\n {\n  \"id\": \"in elit proident anim\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"addressHeight\": \"officia non\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"veniam officia\",\n   \"accountType\": 3,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"nulla sed\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"enim qui aliqu\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"nostrud\",\n   \"importanceHeight\": \"incididunt do\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "82181781-c62d-4cc2-9ec9-77c26dc48e47",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "12eeacba-3555-42c1-bb61-8dd5b994e718",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7ea1860b-6cd3-47bc-8ab6-135278777597",
                    "name": "{account Id}",
                    "item": [
                        {
                            "id": "1e351165-2b35-42e7-8af2-eda1795f0688",
                            "name": "Get account information",
                            "request": {
                                "name": "Get account information",
                                "description": {
                                    "content": "Returns the account information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "43d02b70-276e-4135-b1b3-5f073ece76da",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"ex labore a\",\n \"account\": {\n  \"version\": 1,\n  \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"addressHeight\": \"exer\",\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"publicKeyHeight\": \"sed commodo\",\n  \"accountType\": 0,\n  \"supplementalPublicKeys\": {\n   \"linked\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"node\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"vrf\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"voting\": {\n    \"publicKeys\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  \"activityBuckets\": [\n   {\n    \"startHeight\": \"in mollit\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"startHeight\": \"ea Lorem labore nisi\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"mosaics\": [\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"importance\": \"incid\",\n  \"importanceHeight\": \"velit dolore\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3eb9d635-02a3-4dd9-9939-923e3b612cf9",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "992da0f7-e677-4a9e-a089-0ea8e47c846c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5c8148b3-8b7b-4cbb-9055-dd8aa1b943b3",
                            "name": "Get account merkle information",
                            "request": {
                                "name": "Get account merkle information",
                                "description": {
                                    "content": "Returns the account merkle information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "d80f45c3-abf7-42a7-9a65-6a580dc0df2c",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"in consequat proident voluptate\",\n   \"encodedPath\": \"mollit et ad\",\n   \"nibbleCount\": -31762219,\n   \"linkMask\": \"aliquip consectetur nulla\",\n   \"links\": [\n    {\n     \"bit\": \"Excepteur mollit Ut nulla\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"laborum Duis velit occaecat\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ipsum ut nisi sed\",\n   \"encodedPath\": \"eu irure commodo consequat\",\n   \"nibbleCount\": 94521563,\n   \"linkMask\": \"incididunt Ut\",\n   \"links\": [\n    {\n     \"bit\": \"est culpa in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"non ea qui Ut sit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "621252b4-73f3-441a-8b62-591f8bfd70b0",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a40bc30e-5ee1-4d1e-9aa9-0042deb0031c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "4e7e634e-b373-4464-9bb8-09feb543f474",
            "name": "blocks",
            "item": [
                {
                    "id": "8c924643-2b65-4275-bdaa-3d6d6c68b142",
                    "name": "Search blocks",
                    "request": {
                        "name": "Search blocks",
                        "description": {
                            "content": "Gets an array of bocks.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "blocks"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by public key of the account signing the entity.",
                                    "key": "signerPublicKey",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by beneficiary address.",
                                    "key": "beneficiaryAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "d88bae08-e764-48bc-8f63-2a2ad9558ec1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"eiusmod quis\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 6665926,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 51733675,\n    \"height\": \"ut enim dolore eu\",\n    \"timestamp\": \"aliquip ut sed est\",\n    \"difficulty\": \"cupidatat in in\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"feeMultiplier\": 0\n   }\n  },\n  {\n   \"id\": \"ullamco occaecat\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 81648407,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 7977379,\n    \"height\": \"minim non in laborum\",\n    \"timestamp\": \"aliqua Excepteur\",\n    \"difficulty\": \"minim\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"feeMultiplier\": 0\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -87527561,\n  \"pageSize\": -63817866\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3a68b4fb-ce27-44b5-b886-a9371f2ed1dc",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1ff6d185-b894-497c-adf0-698e1578f0e4",
                    "name": "{height}",
                    "item": [
                        {
                            "id": "9c190b36-fa31-46ee-863a-6db28a73d03d",
                            "name": "Get block information",
                            "request": {
                                "name": "Get block information",
                                "description": {
                                    "content": "Gets a block from the chain that has the given height.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "Lorem ullamco ipsum do",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "35677903-2e3c-42a1-ba87-1f46ec647ece",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"mollit reprehenderit officia\",\n \"meta\": {\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"totalFee\": \"123456\",\n  \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHashSubCacheMerkleRoots\": [\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  ],\n  \"totalTransactionsCount\": 1,\n  \"transactionsCount\": 1,\n  \"statementsCount\": 1\n },\n \"block\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": 8825523,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 66416502,\n  \"height\": \"ullamco aute velit\",\n  \"timestamp\": \"Ut ut commodo nulla\",\n  \"difficulty\": \"sint\",\n  \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n  \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n  \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n  \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"feeMultiplier\": 0\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "44c8b89b-07dc-4046-8030-298413043d2f",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fb826163-c414-4643-be61-0463f8568cb9",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d92a7a0a-14e3-4e88-8c18-804d99372cdf",
                            "name": "Get the merkle path for a given a transaction and block",
                            "request": {
                                "name": "Get the merkle path for a given a transaction and block",
                                "description": {
                                    "content": "Returns the merkle path for a transaction included in a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.transactionsHash) to verify if the transaction was included in the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "transactions",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "Lorem ullamco ipsum do",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Transaction hash.",
                                            "type": "any",
                                            "value": "exercitation velit officia nulla",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "2dbc2a8e-0d83-4218-bcd2-9db3c4be0470",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"left\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1585e9d3-b763-4e9b-802b-b1863f61e9d4",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e7e0a07a-9d1c-42e1-9461-cbbf3686e8af",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "05695735-53dc-46a8-9c74-03bac95268df",
                            "name": "Get the merkle path for a given a receipt statement hash and block",
                            "request": {
                                "name": "Get the merkle path for a given a receipt statement hash and block",
                                "description": {
                                    "content": "Returns the merkle path for a receipt statement or resolution linked to a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.receiptsHash) to verify if the statement was linked with the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "statements",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "Lorem ullamco ipsum do",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Receipt hash.",
                                            "type": "any",
                                            "value": "exercitation velit officia nulla",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "4972ff50-8b0e-4f39-9a29-bb54d3b561fe",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d3c34524-22c8-40f4-8053-92fe62e90902",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f41af27f-f041-4298-9dd3-889952038f82",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "2d90960a-5602-4861-9fe7-3ac16b29f421",
            "name": "Get the current information of the chain",
            "request": {
                "name": "Get the current information of the chain",
                "description": {
                    "content": "Returns the current information of the blockchain.\n\nThe higher the score, the better the chain.\nDuring synchronization, nodes try to get the best blockchain in the network.\n\nThe score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:\n\n    block score = difficulty − time elapsed since last block\n",
                    "type": "text/plain"
                },
                "url": {
                    "path": [
                        "chain",
                        "info"
                    ],
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                },
                "method": "GET",
                "auth": null
            },
            "response": [
                {
                    "id": "46aac959-2555-496a-aca6-cf7474a2ba64",
                    "name": "success",
                    "originalRequest": {
                        "url": {
                            "path": [
                                "chain",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                        {
                            "key": "Content-Type",
                            "value": "application/json"
                        }
                    ],
                    "body": "{\n \"height\": \"in ut\",\n \"scoreHigh\": \"aliquip adipisicing\",\n \"scoreLow\": \"mollit occaecat elit\",\n \"latestFinalizedBlock\": {\n  \"finalizationEpoch\": 123456,\n  \"finalizationPoint\": 0,\n  \"height\": \"eiusmod veniam Duis sed\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                    "cookie": [],
                    "_postman_previewlanguage": "json"
                }
            ],
            "event": []
        },
        {
            "id": "e59d984c-bfa5-4599-b9e0-f6ab4cd921b4",
            "name": "finalization/proof",
            "item": [
                {
                    "id": "f466758e-cd4a-4908-aa6f-dc766ac7cb6e",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof for the greatest height associated with the given epoch.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "epoch",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Finalization epoch.",
                                    "type": "any",
                                    "value": "-35154890",
                                    "key": "epoch"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "d6bf1209-c085-4c90-b2dc-463ff9785de0",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": -97139275,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"in quis enim ad\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"Lorem eiusmod esse ex\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"irure\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8ae4d1ce-b599-412f-bd36-5c80d178fdc3",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "740a0aaa-d85d-47ef-aca5-7a36fd794096",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4136b761-954d-4184-950b-cdbebf376a1b",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof at the given height.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "height",
                                ":height"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Block height.",
                                    "type": "any",
                                    "value": "Lorem ullamco ipsum do",
                                    "key": "height"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "e4f41e84-a898-40cf-aa3e-f7be19c91145",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": -8621178,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"amet consequat dolor\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"sint\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"et dolore fugiat amet\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d6cadc2a-331b-43c0-aae7-a5bb18b552ee",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "eb08bc56-5a7b-437a-951b-28eab1d672a5",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "e57de9a4-e213-4e6d-ad76-2908f1dfdf39",
            "name": "network",
            "item": [
                {
                    "id": "02d9bc0c-bb78-443a-af21-9107c032ae21",
                    "name": "Get the current network type of the chain",
                    "request": {
                        "name": "Get the current network type of the chain",
                        "description": {
                            "content": "Returns the current network type.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "6d2db35d-5790-4985-b466-50e286b796c8",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"name\": \"testnet\",\n \"description\": \"catapult public test network\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1e3f6b6b-ecf0-4f91-ae6a-54bc05b2ab51",
                    "name": "fees",
                    "item": [
                        {
                            "id": "70ef6af0-0251-4809-bfb6-d995546de174",
                            "name": "Get rental fees information",
                            "request": {
                                "name": "Get rental fees information",
                                "description": {
                                    "content": "Returns the estimated effective rental fees for namespaces and mosaics.\nThis endpoint is only available if the REST instance has access to catapult-server ``resources/config-network.properties`` file.\nTo activate this feature, add the setting \"network.propertiesFilePath\" in the configuration file (rest/resources/rest.json).\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "rental"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "2aa30d33-81bf-4496-b2a6-4711a46ffa8d",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"effectiveRootNamespaceRentalFeePerBlock\": \"123456\",\n \"effectiveChildNamespaceRentalFee\": \"123456\",\n \"effectiveMosaicRentalFee\": \"123456\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e38da504-f025-4210-b69e-5d62e0adcdf8",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5ef04d14-0063-4f03-a0c6-8e9708bb2b83",
                            "name": "Get transaction fees information",
                            "request": {
                                "name": "Get transaction fees information",
                                "description": {
                                    "content": "Returns the average, median, highest and lower fee multiplier over the last \"numBlocksTransactionFeeStats\".\nThe setting \"numBlocksTransactionFeeStats\" is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "99ba1d84-06ba-4933-bedc-ef74f00282dd",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "transaction"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"averageFeeMultiplier\": 0,\n \"medianFeeMultiplier\": 0,\n \"highestFeeMultiplier\": 0,\n \"lowestFeeMultiplier\": 0,\n \"minFeeMultiplier\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "09bca4c1-0ef0-437b-b0de-e42e7c25fdd3",
                    "name": "Get the network properties",
                    "request": {
                        "name": "Get the network properties",
                        "description": {
                            "content": "Returns the content from a catapult-server network configuration file (resources/config-network.properties).\nTo enable this feature, the REST setting \"network.propertiesFilePath\" must define where the file is located.\nThis is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network",
                                "properties"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "db28b99b-d276-48be-bb01-fa739840441a",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"network\": {\n  \"identifier\": \"testnet\",\n  \"nodeEqualityStrategy\": \"public-key\",\n  \"nemesisSignerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"generationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"epochAdjustment\": \"1573430400s\"\n },\n \"chain\": {\n  \"enableVerifiableState\": true,\n  \"enableVerifiableReceipts\": true,\n  \"currencyMosaicId\": \"0x24F4'26B8'D549'3D4B\",\n  \"harvestingMosaicId\": \"0x1D9C'DC7E'218C'A88D\",\n  \"blockGenerationTargetTime\": \"30s\",\n  \"blockTimeSmoothingFactor\": \"3000\",\n  \"blockFinalizationInterval\": \"ad nisi dolore ea\",\n  \"importanceGrouping\": \"39\",\n  \"importanceActivityPercentage\": \"5\",\n  \"maxRollbackBlocks\": \"40\",\n  \"maxDifficultyBlocks\": \"60\",\n  \"defaultDynamicFeeMultiplier\": \"10'000\",\n  \"maxTransactionLifetime\": \"24h\",\n  \"maxBlockFutureTime\": \"500ms\",\n  \"initialCurrencyAtomicUnits\": \"8'998'999'998'000'000\",\n  \"maxMosaicAtomicUnits\": \"9'000'000'000'000'000\",\n  \"totalChainImportance\": \"15'000'000\",\n  \"minHarvesterBalance\": \"500\",\n  \"maxHarvesterBalance\": \"4'000'000\",\n  \"minVoterBalance\": \"50'000\",\n  \"maxVotingKeysPerAccount\": \"3\",\n  \"minVotingKeyLifetime\": \"72\",\n  \"maxVotingKeyLifetime\": \"26280\",\n  \"harvestBeneficiaryPercentage\": \"10\",\n  \"harvestNetworkPercentage\": \"5\",\n  \"harvestNetworkFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"blockPruneInterval\": \"360\",\n  \"maxTransactionsPerBlock\": \"200'000\"\n },\n \"plugins\": {\n  \"accountlink\": {\n   \"dummy\": \"labore ea fugiat culpa elit\"\n  },\n  \"aggregate\": {\n   \"maxTransactionsPerAggregate\": \"1'000\",\n   \"maxCosignaturesPerAggregate\": \"15\",\n   \"enableStrictCosignatureCheck\": false,\n   \"enableBondedAggregateSupport\": true,\n   \"maxBondedTransactionLifetime\": \"48h\"\n  },\n  \"lockhash\": {\n   \"lockedFundsPerAggregate\": \"10'000'000\",\n   \"maxHashLockDuration\": \"2d\"\n  },\n  \"locksecret\": {\n   \"maxSecretLockDuration\": \"30d\",\n   \"minProofSize\": \"1\",\n   \"maxProofSize\": \"1000\"\n  },\n  \"metadata\": {\n   \"maxValueSize\": \"1024\"\n  },\n  \"mosaic\": {\n   \"maxMosaicsPerAccount\": \"10'000\",\n   \"maxMosaicDuration\": \"3650d\",\n   \"maxMosaicDivisibility\": \"6\",\n   \"mosaicRentalFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"mosaicRentalFee\": \"500\"\n  },\n  \"multisig\": {\n   \"maxMultisigDepth\": \"3\",\n   \"maxCosignatoriesPerAccount\": \"10\",\n   \"maxCosignedAccountsPerAccount\": \"5\"\n  },\n  \"namespace\": {\n   \"maxNameSize\": \"64\",\n   \"maxChildNamespaces\": \"500\",\n   \"maxNamespaceDepth\": \"3\",\n   \"minNamespaceDuration\": \"1m\",\n   \"maxNamespaceDuration\": \"365d\",\n   \"namespaceGracePeriodDuration\": \"2m\",\n   \"reservedRootNamespaceNames\": \"xem, nem, user, account, org, com, biz, net, edu, mil, gov, info\",\n   \"namespaceRentalFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"rootNamespaceRentalFeePerBlock\": \"1\",\n   \"childNamespaceRentalFee\": \"100\"\n  },\n  \"restrictionaccount\": {\n   \"maxAccountRestrictionValues\": \"512\"\n  },\n  \"restrictionmosaic\": {\n   \"maxMosaicRestrictionValues\": \"20\"\n  },\n  \"transfer\": {\n   \"maxMessageSize\": \"1024\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "7fca5c9f-1c71-4f5a-b0c9-15b5c23eb88c",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "c873da4c-a859-4241-90ea-91b7294bdfc0",
            "name": "node",
            "item": [
                {
                    "id": "cfa56908-c8d1-4729-95f4-889637858b99",
                    "name": "Get the node health information",
                    "request": {
                        "name": "Get the node health information",
                        "description": {
                            "content": "Supplies information regarding the connection and services status.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "health"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "742c10f7-9919-4876-bef6-b150fc01a0a4",
                            "name": "Both API node and database services are reachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"up\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "47f2c24c-f011-4f62-affb-3f6dc376dd5d",
                            "name": "Either API node or database service is unavailable or unreachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"up\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "25cee9b2-f780-4586-989a-f4356a3921ef",
                    "name": "Get the node information",
                    "request": {
                        "name": "Get the node information",
                        "description": {
                            "content": "Supplies additional information about the application running on a node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "7fdb4c10-210d-4bd9-80a9-4b88f2fa47c1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "info"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": 0,\n \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"roles\": 7,\n \"port\": 7900,\n \"networkIdentifier\": 144,\n \"friendlyName\": \"api-node-0\",\n \"host\": \"127.0.0.1\",\n \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "83e674d0-f469-46b1-b1bf-537241640c17",
                    "name": "Get peers information",
                    "request": {
                        "name": "Get peers information",
                        "description": {
                            "content": "Gets the list of peers visible by the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "peers"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "17e60bfe-3dd8-4f13-8422-13e15bdac8c8",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "peers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n },\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "35daa4a9-1548-46bb-8717-59d4ee069c0d",
                    "name": "Get the storage information of the node",
                    "request": {
                        "name": "Get the storage information of the node",
                        "description": {
                            "content": "Returns storage information about the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "storage"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9320e0ff-7520-43cb-a951-2dd9a8feecf5",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "storage"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"numBlocks\": 245053,\n \"numTransactions\": 58590,\n \"numAccounts\": 177\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d6a8f3c3-be52-405f-9620-660cc903e227",
                    "name": "Get the node time",
                    "request": {
                        "name": "Get the node time",
                        "description": {
                            "content": "Gets the node time at the moment the reply was sent and received.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "time"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "83d8633c-f67b-4f4f-8dd3-1e1a7b89aedb",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "time"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"communicationTimestamps\": {\n  \"sendTimestamp\": \"ad proident\",\n  \"receiveTimestamp\": \"amet quis\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e6f1935e-b0e1-4a9c-ac2b-eaf18d77cd2c",
                    "name": "Get the version of the running REST component",
                    "request": {
                        "name": "Get the version of the running REST component",
                        "description": {
                            "content": "Returns the version of the running catapult-rest component.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "server"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9c73a768-74bb-4481-8314-bdbe083ab57f",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "server"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"serverInfo\": {\n  \"restVersion\": \"1.0.14\",\n  \"sdkVersion\": \"0.7.14\",\n  \"deployment\": {\n   \"deploymentTool\": \"symbol-bootstrap\",\n   \"deploymentToolVersion\": \"1.0.6\",\n   \"lastUpdatedDate\": \"2021-06-02\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1ce50fcf-43c8-4de2-bf14-a5b37e45f21e",
                    "name": "Get the unlocked harvesting account public keys.",
                    "request": {
                        "name": "Get the unlocked harvesting account public keys.",
                        "description": {
                            "content": "Returns array of unlocked account public keys.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "unlockedaccount"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "5e216c25-7c11-485b-8008-f8b4d2e20362",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "unlockedaccount"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"unlockedAccount\": [\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "3419937f-88e2-4a36-acbe-39d81a2f9ca2",
            "name": "transactions",
            "item": [
                {
                    "id": "6b0e6f90-91fb-409a-b6d9-69afd21fb4d8",
                    "name": "Announce a new transaction",
                    "request": {
                        "name": "Announce a new transaction",
                        "description": {
                            "content": "Announces a transaction to the network.\nThe [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities.\nCatbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html). \nIt's recommended to use SDKs instead of calling the API endpoint directly to announce transactions.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"payload\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "d9c96907-3499-4b9f-8c2a-0f9269d04ff7",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"Lorem eu\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a181c253-e3d2-40fd-8f42-176cad2d69c3",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "bbbdb1d0-eea0-4999-bf3e-f3a722fcb6de",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fa73d38c-6750-405d-bdba-df4c00a3fad6",
                    "name": "confirmed",
                    "item": [
                        {
                            "id": "1459fbad-0421-4a1b-8204-12a7ff91b461",
                            "name": "Search confirmed transactions",
                            "request": {
                                "name": "Search confirmed transactions",
                                "description": {
                                    "content": "Returns an array of confirmed transactions.\nIf a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that\nwas resolved from the alias at confirmation time.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "42f58e12-d57c-4071-ba26-024180cae43f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"eiusmod cillum irure sunt ut\",\n   \"meta\": {\n    \"height\": \"voluptate dolore\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -97796357,\n    \"timestamp\": \"minim quis ex\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 28131244,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 92037235,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"esse in\",\n   \"meta\": {\n    \"height\": \"adipisicing fugiat\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -96395229,\n    \"timestamp\": \"ullamco\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 65026515,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -93986823,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 84346119,\n  \"pageSize\": -48590844\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "326883c0-161e-4c51-854e-07584040c558",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3e125ffd-77e9-4bdb-b947-887f6377e873",
                            "name": "Get confirmed trasactions information",
                            "request": {
                                "name": "Get confirmed trasactions information",
                                "description": {
                                    "content": "Returns confirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "97e5b9c5-b9b5-41e7-89d0-fbb5f9f56ffa",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"occaecat ut\",\n  \"meta\": {\n   \"height\": \"labore magna aute culpa voluptate\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 7630272,\n   \"timestamp\": \"in quis\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -13810438,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 83001986,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"Lorem do\",\n  \"meta\": {\n   \"height\": \"in elit voluptate laborum\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 29929319,\n   \"timestamp\": \"deserunt in in\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 76715894,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -27974305,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9eeea7f0-4da0-4e18-8d2c-cc951351f739",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "beac9966-4457-49b1-8e67-b21105d49af8",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e36f8f29-15e9-4aab-b68e-a034f1502860",
                            "name": "Get confirmed transaction information",
                            "request": {
                                "name": "Get confirmed transaction information",
                                "description": {
                                    "content": "Returns confirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "a5ab68f7-3fc2-49d9-8c4c-8e9a69331925",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"enim ut ullamco Lorem Duis\",\n \"meta\": {\n  \"height\": \"ea\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": -68689295,\n  \"timestamp\": \"nisi consectet\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -7036361,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 52348638,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "26e47eb1-7d70-4b69-b35e-035b823858a2",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f765872e-4f2d-442f-a265-88ebcf57ca85",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1f8394ae-ed02-4f17-8dde-abb370589c3c",
                    "name": "unconfirmed",
                    "item": [
                        {
                            "id": "7ed1b51d-669e-4d94-852e-815aaef3d680",
                            "name": "Search unconfirmed transactions",
                            "request": {
                                "name": "Search unconfirmed transactions",
                                "description": {
                                    "content": "Returns an array of unconfirmed transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "fe9424aa-0e0f-448a-9978-abfb0b4416d1",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"nisi\",\n   \"meta\": {\n    \"height\": \"qui aute\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -98992921,\n    \"timestamp\": \"dolor eiusmod Duis tempor\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 79041958,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 2911640,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"eu culpa velit\",\n   \"meta\": {\n    \"height\": \"tempor\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 23671416,\n    \"timestamp\": \"ut fugiat officia sed\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 19419440,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -40616426,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 87261621,\n  \"pageSize\": -90344112\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "33b4347a-3739-4c2a-b395-3be7d70e2cea",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "332b9028-dd50-4f16-ab29-5dc69bcc38b1",
                            "name": "Get unconfirmed trasactions information",
                            "request": {
                                "name": "Get unconfirmed trasactions information",
                                "description": {
                                    "content": "Returns unconfirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "1c48acae-9ff5-4dfe-8007-dd902a14db11",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"occaecat ut\",\n  \"meta\": {\n   \"height\": \"labore magna aute culpa voluptate\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 7630272,\n   \"timestamp\": \"in quis\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -13810438,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 83001986,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"Lorem do\",\n  \"meta\": {\n   \"height\": \"in elit voluptate laborum\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 29929319,\n   \"timestamp\": \"deserunt in in\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 76715894,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -27974305,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ec5655de-8c15-4bdb-bb32-8afe52d602e8",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "86049de0-1e3a-47f4-b257-13211338e344",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a72660fe-7aa1-4709-9014-def64c1d2e39",
                            "name": "Get unconfirmed transaction information",
                            "request": {
                                "name": "Get unconfirmed transaction information",
                                "description": {
                                    "content": "Returns unconfirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "9ab1fe3b-f00a-426b-8fd6-e3094e72815d",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"enim ut ullamco Lorem Duis\",\n \"meta\": {\n  \"height\": \"ea\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": -68689295,\n  \"timestamp\": \"nisi consectet\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -7036361,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 52348638,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b4ceae08-fb7f-4ca7-8a4c-e6e1379e6517",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8d182f2e-fd9b-4191-b061-ef5b1053b353",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "68889fad-e9f8-4aa7-98dc-e362c2ca06b4",
                    "name": "partial",
                    "item": [
                        {
                            "id": "33231551-b389-4b57-bc43-5404a18ce6e2",
                            "name": "Search partial transactions",
                            "request": {
                                "name": "Search partial transactions",
                                "description": {
                                    "content": "Returns an array of partial transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "sit sunt sed"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "8e48b989-17c1-497a-94a1-ce4bcb349bd2",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"nisi\",\n   \"meta\": {\n    \"height\": \"qui aute\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -98992921,\n    \"timestamp\": \"dolor eiusmod Duis tempor\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 79041958,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 2911640,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"eu culpa velit\",\n   \"meta\": {\n    \"height\": \"tempor\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 23671416,\n    \"timestamp\": \"ut fugiat officia sed\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 19419440,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -40616426,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 87261621,\n  \"pageSize\": -90344112\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "58d78601-db7d-42c5-9539-e9dfc0756705",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "97df8e88-f61f-4b23-bead-bcd9062f5f1d",
                            "name": "Announce an aggregate bonded transaction",
                            "request": {
                                "name": "Announce an aggregate bonded transaction",
                                "description": {
                                    "content": "Announces an aggregate bonded transaction to the network.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"payload\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "901d28e5-6c3b-42cb-b229-e5315750bc9e",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Accepted",
                                    "code": 202,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"message\": \"Lorem eu\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3ce5e008-ea4d-40b9-951b-3970a7fc6ed2",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "815692fe-7fa5-45ab-a078-58215397217d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f2c06daf-18d2-4272-8374-2ab7451787a2",
                            "name": "Get partial trasactions information",
                            "request": {
                                "name": "Get partial trasactions information",
                                "description": {
                                    "content": "Returns partial transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "49766530-2d71-4638-b98f-259f98c71cef",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"occaecat ut\",\n  \"meta\": {\n   \"height\": \"labore magna aute culpa voluptate\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 7630272,\n   \"timestamp\": \"in quis\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -13810438,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 83001986,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"Lorem do\",\n  \"meta\": {\n   \"height\": \"in elit voluptate laborum\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 29929319,\n   \"timestamp\": \"deserunt in in\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 76715894,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -27974305,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cf66bd4c-d73d-47cd-84d2-f04df148bc93",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "806c4b8e-98bd-4ca0-9886-b594ae0eddb4",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "051e3dc8-74cd-4193-beed-5cbd5bfd0781",
                            "name": "Get partial transaction information",
                            "request": {
                                "name": "Get partial transaction information",
                                "description": {
                                    "content": "Returns partial transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "b78c34f7-1f60-4226-a3c5-c18e83d9bff8",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"enim ut ullamco Lorem Duis\",\n \"meta\": {\n  \"height\": \"ea\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": -68689295,\n  \"timestamp\": \"nisi consectet\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -7036361,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 52348638,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "36ffa789-d01b-4bab-a74d-1badb68f8f78",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f887aa2d-4e1a-44ad-900b-e24e0d5cea40",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "5bb22cc5-a792-41a4-b937-1aca4ab38803",
                    "name": "Announce a cosignature transaction",
                    "request": {
                        "name": "Announce a cosignature transaction",
                        "description": {
                            "content": "Announces a cosignature transaction to the network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions",
                                "cosignature"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"parentHash\": \"Lorem pariatur consequat aliquip\",\n    \"signature\": \"<string>\",\n    \"signerPublicKey\": \"proiden\",\n    \"version\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "1091231e-abd9-4f35-8c5a-8804e0cda914",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"Lorem eu\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "77d1d930-60ad-4028-92ea-2b260e8a9e8f",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "979c1fb7-b4f2-4916-a70b-532b3ff9436f",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "ed4c5be3-d20e-43f5-af11-64eea0981980",
            "name": "transaction Status",
            "item": [
                {
                    "id": "d5b4a014-09f9-4e1d-a84d-91ca9540c2ad",
                    "name": "Get transaction statuses",
                    "request": {
                        "name": "Get transaction statuses",
                        "description": {
                            "content": "Returns an array of transaction statuses for a given array of transaction hashes.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"hashes\": [\n        \"ea nisi\",\n        \"in nisi\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "f0b9b5f9-0764-4e57-ac75-58080f68b16f",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"group\": \"failed\",\n  \"deadline\": \"mollit et sit i\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_Chain_Unlinked\",\n  \"height\": \"esse in\"\n },\n {\n  \"group\": \"confirmed\",\n  \"deadline\": \"commodo ex non dolor qui\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_Chain_Block_Not_Hit\",\n  \"height\": \"consequat culpa\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3ceba368-2515-4f44-9dbf-5becf03d7a68",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3a40c721-546d-4556-b8b1-488b678581fb",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c6dd5834-8d7d-4fe8-9b3b-842ff074a2fd",
                    "name": "Get transaction status",
                    "request": {
                        "name": "Get transaction status",
                        "description": {
                            "content": "Returns the transaction status for a given hash.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus",
                                ":hash"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Transaction hash.",
                                    "type": "any",
                                    "value": "exercitation velit officia nulla",
                                    "key": "hash"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2866867f-6052-4c8e-97a8-564320e93ee5",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"group\": \"confirmed\",\n \"deadline\": \"enim Duis ut\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"code\": \"Failure_Core_Too_Many_Links\",\n \"height\": \"sit sed in\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "91088fd2-1229-45c8-923c-7571f3329d32",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8e45fda9-226b-46e0-982a-17dde7ad5fa7",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "293338f1-a790-4748-9661-8930c9ce9322",
            "name": "lock",
            "item": [
                {
                    "id": "02de6fb5-290e-4731-b4cf-3ec932936bcf",
                    "name": "hash",
                    "item": [
                        {
                            "id": "d31a79bd-1f70-4250-8c62-a7b5f2682491",
                            "name": "Search hash lock entries",
                            "request": {
                                "name": "Search hash lock entries",
                                "description": {
                                    "content": "Returns an array of hash locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "8e90d346-9224-412a-bd66-80cd72adeeb4",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"dolor velit aliqua Lorem\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"officia incididunt consectetur cillum\",\n    \"status\": 0,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"aliqua nisi\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"voluptate\",\n    \"status\": 1,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 91283306,\n  \"pageSize\": 89080216\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6b5433d9-936d-4c87-a9fa-26f78182f861",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5c8dd2ee-8b6c-4e89-afbf-b9a186c97472",
                            "name": "{hash}",
                            "item": [
                                {
                                    "id": "8f67905e-026f-4380-ac00-647730d61630",
                                    "name": "Get hash lock information",
                                    "request": {
                                        "name": "Get hash lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "9ef843ff-b7ab-4bb5-a007-f9bb7ac212e9",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"deserunt qui ut\",\n  \"status\": 0,\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "159da8cc-9eef-4f7a-bcb8-d6208257ff1b",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "a6d9c506-63c5-49a7-9199-dc59982a00b9",
                                    "name": "Get hash lock merkle information",
                                    "request": {
                                        "name": "Get hash lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "03ae4bb2-8fac-41c4-89e5-ca3ab4d80e8d",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "771fef00-f186-4d56-a10b-8c27405b16e9",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2f58c796-a0a1-455a-8806-faf192fe12b6",
                    "name": "secret",
                    "item": [
                        {
                            "id": "030c1abb-a94b-4af4-9bb4-b61e7b88adc5",
                            "name": "Search secret lock entries",
                            "request": {
                                "name": "Search secret lock entries",
                                "description": {
                                    "content": "Returns an array of secret locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "secret"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Filter by secret.",
                                            "key": "secret",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "194f7873-6702-4a1a-9953-3d0ee12e958f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"incididunt esse\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"ex id\",\n    \"status\": 0,\n    \"hashAlgorithm\": 1,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"dolor deserunt\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"occaecat nisi et elit\",\n    \"status\": 1,\n    \"hashAlgorithm\": 0,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -68780006,\n  \"pageSize\": -78217644\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "af1cdb76-2920-4a59-b1a6-f178e3885299",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b0e41c8e-ee7f-4d47-8d18-bc9f49d16864",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "8c2ac6e8-4aa4-46b3-9394-e52f48080585",
                                    "name": "Get secret lock information",
                                    "request": {
                                        "name": "Get secret lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "adb0f030-3b86-41b4-9fa9-73a063546683",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"aliquip eiusmod labore\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"dolor Excepte\",\n  \"status\": 0,\n  \"hashAlgorithm\": 1,\n  \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n  \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "94c34a97-2948-4476-98ac-a0476359dc47",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "79c5b12d-885a-4203-92ed-3fdbb26d0f39",
                                    "name": "Get secret lock merkle information",
                                    "request": {
                                        "name": "Get secret lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "a316869d-bf75-4b02-8ac3-90abfee56680",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "179072f9-1f8e-4c5e-9b67-a55b2d404c46",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "94b2f96c-b152-4c77-afbb-aae04ca18240",
            "name": "metadata",
            "item": [
                {
                    "id": "4ff08ca0-5c5d-4415-9913-52f00c6369b2",
                    "name": "Search metadata entries",
                    "request": {
                        "name": "Search metadata entries",
                        "description": {
                            "content": "Returns an array of metadata.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "metadata"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by address sending the metadata entry.",
                                    "key": "sourceAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by metadata key.",
                                    "key": "scopedMetadataKey",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by namespace or mosaic id.",
                                    "key": "targetId",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by metadata type.",
                                    "key": "metadataType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "026a703b-5595-4687-b4bf-fa1661e3e875",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"sint id in fugiat commodo\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"dolore officia sed dolore laborum\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  },\n  {\n   \"id\": \"sed nulla v\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"voluptate aliqua elit pariatur\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -82053226,\n  \"pageSize\": 68322970\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a4112965-8558-4381-b5ed-427b71e7eafb",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ae0de69d-d18f-4acc-8d30-1f2146e4bcef",
                    "name": "{composite Hash}",
                    "item": [
                        {
                            "id": "ca0c3132-76d3-47d2-95eb-823524de08b2",
                            "name": "Get metadata information",
                            "request": {
                                "name": "Get metadata information",
                                "description": {
                                    "content": "Gets the metadata for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "exercitation velit officia nulla",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "e532520f-2ddf-49d0-be1c-1c10af94fa92",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"magna labore ad velit amet\",\n \"metadataEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n  \"metadataType\": \"<integer>\",\n  \"value\": \"ullamco in\",\n  \"targetId\": \"0DC67FBE1CAD29E3\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1c71f844-b654-47d9-a048-56b2b5f102f2",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6f2ba87a-3c18-4daf-9394-fb65adcbdfb8",
                            "name": "Get metadata merkle information",
                            "request": {
                                "name": "Get metadata merkle information",
                                "description": {
                                    "content": "Gets the metadata merkle for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "exercitation velit officia nulla",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "1a5715ac-3e5d-44ba-bc6c-840e9125c47d",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3b5815a0-f7de-41da-8b32-54e451260a3d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "28299fef-677c-4401-9f34-fb40da6c7855",
            "name": "mosaics",
            "item": [
                {
                    "id": "01bee5b1-61d5-4e31-bca1-4b46bd65898a",
                    "name": "Search mosaics",
                    "request": {
                        "name": "Search mosaics",
                        "description": {
                            "content": "Gets an array of mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "adc52e68-9b33-4e83-8695-40371127f87d",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"Ut dolore irure ad\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"sed ullamco id elit\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"revision\": 2222212828,\n    \"flags\": -54486004,\n    \"divisibility\": 43034766,\n    \"duration\": \"amet est\"\n   }\n  },\n  {\n   \"id\": \"anim Excepteur\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"dolore quis nulla in\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"revision\": 2222212828,\n    \"flags\": -60034016,\n    \"divisibility\": -68140888,\n    \"duration\": \"Duis nisi eu\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -97404884,\n  \"pageSize\": -81747405\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "15edf40a-ed39-4585-bcbd-52995312bf45",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "576c80e1-9a84-43ad-9dd6-1ff97a3c50b9",
                    "name": "Get mosaics information for an array of mosaics",
                    "request": {
                        "name": "Get mosaics information for an array of mosaics",
                        "description": {
                            "content": "Gets an array of mosaic definition.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "7e41144b-761d-43b9-bf1f-47e7d1ec3a9f",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"officia Ut ex magna\",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"aute in deserunt ad et\",\n   \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"revision\": 2222212828,\n   \"flags\": 72557370,\n   \"divisibility\": -28811953,\n   \"duration\": \"labore id Lorem nulla\"\n  }\n },\n {\n  \"id\": \"do reprehenderit \",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"nulla proident\",\n   \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"revision\": 2222212828,\n   \"flags\": 15617304,\n   \"divisibility\": 71132033,\n   \"duration\": \"Lorem nostrud quis\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b98fabaa-707d-45c9-bd36-569fad7e8c5d",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "41b67b35-071b-46da-8e7f-441dcc84f914",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6ad66238-101d-4954-89eb-0f1e154f17c1",
                    "name": "{mosaic Id}",
                    "item": [
                        {
                            "id": "bad99100-df9a-4fa8-8b02-f0fbe86186f4",
                            "name": "Get mosaic information",
                            "request": {
                                "name": "Get mosaic information",
                                "description": {
                                    "content": "Gets the mosaic definition for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "ade2ae89-b939-4d67-90d1-681a7d45fa90",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"mollit esse consequat ut\",\n \"mosaic\": {\n  \"version\": 1,\n  \"id\": \"0DC67FBE1CAD29E3\",\n  \"supply\": \"123456\",\n  \"startHeight\": \"eu id minim velit\",\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"revision\": 2222212828,\n  \"flags\": 64192930,\n  \"divisibility\": 14309708,\n  \"duration\": \"consequat commodo dolore Excepteur\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8916054c-d442-4132-ad5f-33bd57956959",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5dfb90ae-69a8-46ee-8011-fbb225c0cc63",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2eb0496a-3218-45dd-bb49-5f904f896d98",
                            "name": "Get mosaic merkle information",
                            "request": {
                                "name": "Get mosaic merkle information",
                                "description": {
                                    "content": "Gets the mosaic definition merkle for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "cececf84-b2e6-427b-b650-c27dae9cc8ef",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9c75a65a-55fb-492b-bbb1-b1f09791a9d3",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "674909a4-81ff-4b48-bd4b-ded9eead1fe0",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "3c157537-0b88-4ff2-9975-f5d38984901d",
            "name": "account/{address}/multisig",
            "item": [
                {
                    "id": "ef51ecfd-ce08-487b-bedf-de247858c8b1",
                    "name": "Get multisig account information",
                    "request": {
                        "name": "Get multisig account information",
                        "description": {
                            "content": "Returns the multisig account information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "cupidatat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "644cae10-49e0-43cc-9331-018fe2e2e72a",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"multisig\": {\n  \"version\": 1,\n  \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"minApproval\": 2222212828,\n  \"minRemoval\": 2222212828,\n  \"cosignatoryAddresses\": [\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  ],\n  \"multisigAddresses\": [\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  ]\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e7fe02c9-17a0-45b8-a066-6b628da7158a",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2779592b-eea2-4bfe-85d2-e9cbb2d55b0d",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6fd95b2f-ed51-491b-89c0-797bb654c246",
                    "name": "Get multisig account merkle information",
                    "request": {
                        "name": "Get multisig account merkle information",
                        "description": {
                            "content": "Returns the multisig account merkle information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "merkle"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "cupidatat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "ae927614-4a0b-4dfe-9585-e9292cee3a29",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4e63ab16-87ee-41c4-baa4-10c6cff2cd4b",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "aa58d04c-5f9f-4c5d-a039-8c6e4843ffd4",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6d3de47c-1bb9-4777-aff3-7c821d3b50dc",
                    "name": "Get multisig account graph information",
                    "request": {
                        "name": "Get multisig account graph information",
                        "description": {
                            "content": "Returns the multisig account graph.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "graph"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "cupidatat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "8d9f6e77-b0a9-4662-97f6-0ccb5caa05c1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   }\n  ]\n },\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   }\n  ]\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "593e0020-fe89-4db4-8368-f2d9885fbe4c",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b536a71b-ebb8-44e7-8d5f-c5b34a7d3a69",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "7f45c18a-a4ee-4d90-bbac-c7c6055efa6b",
            "name": "namespaces",
            "item": [
                {
                    "id": "6346b725-b684-4105-8d65-54ff05908ebd",
                    "name": "Search namespaces",
                    "request": {
                        "name": "Search namespaces",
                        "description": {
                            "content": "Gets an array of namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by registration type.",
                                    "key": "registrationType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by root namespace.",
                                    "key": "level0",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by alias type.",
                                    "key": "aliasType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "7307b820-5f1e-4f73-935d-a8f23d3655e9",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"sunt velit\",\n   \"meta\": {\n    \"active\": true,\n    \"index\": 58490277\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"startHeight\": \"ipsum Excepteur\",\n    \"endHeight\": \"est aute\",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  },\n  {\n   \"id\": \"adipisicing laborum Excepteur\",\n   \"meta\": {\n    \"active\": true,\n    \"index\": -18614231\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"startHeight\": \"anim eiusmod ut exercitation\",\n    \"endHeight\": \"dolore ipsum elit dolor\",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 78124455,\n  \"pageSize\": 38466338\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "cf3f544e-8ede-425e-89c2-0ef5a942a6ba",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e041d457-541c-44c6-989b-86a6f4af8096",
                    "name": "{namespace Id}",
                    "item": [
                        {
                            "id": "652e7ef8-ca55-4d76-8a31-2683db55b6de",
                            "name": "Get namespace information",
                            "request": {
                                "name": "Get namespace information",
                                "description": {
                                    "content": "Gets the namespace for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "669e9414-a648-46cd-8a07-4a0d7d964fac",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"in aliqua\",\n \"meta\": {\n  \"active\": false,\n  \"index\": 41541568\n },\n \"namespace\": {\n  \"version\": 1,\n  \"registrationType\": 0,\n  \"depth\": 1,\n  \"level0\": \"85BBEA6CC462B244\",\n  \"alias\": {\n   \"type\": 0,\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  },\n  \"parentId\": \"85BBEA6CC462B244\",\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"startHeight\": \"aliqua commodo exercitation do\",\n  \"endHeight\": \"non do deserunt\",\n  \"level1\": \"85BBEA6CC462B244\",\n  \"level2\": \"85BBEA6CC462B244\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2810ed27-eda8-415b-b04e-e4316ab20509",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "093024c6-4519-4a67-b0c9-fa41a621e6e2",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c21fb480-8b1c-464c-a15c-4d9c41f9582a",
                            "name": "Get namespace merkle information",
                            "request": {
                                "name": "Get namespace merkle information",
                                "description": {
                                    "content": "Gets the namespace merkle for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "04253857-ceb4-4658-823c-7b9f7e7bc49a",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2250895e-31ff-4bca-8210-01641dddb058",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "45e780c9-0992-413c-85dd-57371440a4c5",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1e3c640e-8235-44f6-99a5-97a0396d719a",
                    "name": "Get readable names for a set of namespaces",
                    "request": {
                        "name": "Get readable names for a set of namespaces",
                        "description": {
                            "content": "Returns friendly names for namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"namespaceIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "1aacab51-5795-4833-a819-b163dafc55e4",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n },\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "76fb941a-6281-432c-80ae-84299ce2f62b",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ed6cddc4-6dcf-43bc-b1b1-037549724bb3",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "470cac0c-e0eb-4e64-b47a-e21be6fa7acc",
                    "name": "Get readable names for a set of accountIds",
                    "request": {
                        "name": "Get readable names for a set of accountIds",
                        "description": {
                            "content": "Returns friendly names for accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "account",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"addresses\": [\n        \"ullamco aute exercitation\",\n        \"reprehenderit\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "a79de78f-e7e2-4836-a02c-f7df9b49aaf3",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"accountNames\": [\n  {\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  },\n  {\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "dd9b52bf-233c-4f40-b65b-b90371c90414",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e9509ff9-8fec-450d-9e30-639bbd8f2ade",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "91a0c91c-ce7f-43fd-8e05-ddc36109566d",
                    "name": "Get readable names for a set of mosaics",
                    "request": {
                        "name": "Get readable names for a set of mosaics",
                        "description": {
                            "content": "Returns friendly names for mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "mosaic",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "af30f09b-4554-4e05-809f-c786ac5f466c",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"mosaicNames\": [\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  },\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3e317664-afb4-49f2-9327-5ca3428a00a6",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ffeff535-56db-4537-86d1-d94020aadf15",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "8f28d9f0-f14e-4659-bb11-99210859fc8e",
            "name": "statements",
            "item": [
                {
                    "id": "70580a16-d6d6-4739-9e1f-c2b391433b35",
                    "name": "Search transaction statements",
                    "request": {
                        "name": "Search transaction statements",
                        "description": {
                            "content": "Gets an array of transaction statements.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "statements",
                                "transaction"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by block height.",
                                    "key": "height",
                                    "value": "Lorem ullamco ipsum do"
                                },
                                {
                                    "description": "Only blocks with height greater or equal than this one are returned.",
                                    "key": "fromHeight",
                                    "value": "Lorem ullamco ipsum do"
                                },
                                {
                                    "description": "Only blocks with height smaller or equal than this one are returned.",
                                    "key": "toHeight",
                                    "value": "Lorem ullamco ipsum do"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by address of the account receiving the transaction.",
                                    "key": "recipientAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by address sending mosaics.",
                                    "key": "senderAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "cupidatat"
                                },
                                {
                                    "description": "Mosaic or namespace identifier",
                                    "key": "artifactId",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "c5feb369-3077-4050-8096-20e6487c1da7",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"culpa\",\n   \"meta\": {\n    \"timestamp\": \"fugiat pariatur\"\n   },\n   \"statement\": {\n    \"height\": \"eiusmod\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  },\n  {\n   \"id\": \"veniam in quis in\",\n   \"meta\": {\n    \"timestamp\": \"est nisi id laboris consequat\"\n   },\n   \"statement\": {\n    \"height\": \"ipsum in irure\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -65472182,\n  \"pageSize\": 1684380\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "78253857-e215-4bdc-b48d-e66bf7ecb6cb",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "109abbe1-2599-4789-b1c2-fda6ea5ff4a6",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "in dolor labore aliqua sint"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4bac9cab-9b6d-4520-991c-a0f99e8eb5fa",
                    "name": "resolutions",
                    "item": [
                        {
                            "id": "a4088b18-df48-4546-9eb0-6752b562740a",
                            "name": "Get receipts address resolution statements",
                            "request": {
                                "name": "Get receipts address resolution statements",
                                "description": {
                                    "content": "Gets an array of address resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "address"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "8a312c2f-f7bf-4e1b-9cca-c2e8a62ec529",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"proident mollit ullamco dolore\",\n   \"meta\": {\n    \"timestamp\": \"mollit\"\n   },\n   \"statement\": {\n    \"height\": \"labore ex non\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"sint ullamco\",\n   \"meta\": {\n    \"timestamp\": \"dolore aute\"\n   },\n   \"statement\": {\n    \"height\": \"est non eiusmod\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -56613325,\n  \"pageSize\": 96670938\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "06d719f5-2241-4d9d-b3d9-e2d6eef0b2b2",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "62257e32-b83f-483d-9e0b-e030e006b162",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "97e0622d-3bed-4fab-b5f0-9ea041921e4a",
                            "name": "Get receipts mosaic resolution statements",
                            "request": {
                                "name": "Get receipts mosaic resolution statements",
                                "description": {
                                    "content": "Gets an array of mosaic resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "Lorem ullamco ipsum do"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "d31ae249-1af1-4661-a181-50544061e854",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"aliqua deserunt adipisicing elit\",\n   \"meta\": {\n    \"timestamp\": \"culpa id aliquip veniam\"\n   },\n   \"statement\": {\n    \"height\": \"do in eiusmod et\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"dolor exercitation in\",\n   \"meta\": {\n    \"timestamp\": \"officia in ea\"\n   },\n   \"statement\": {\n    \"height\": \"exercitation ullamco non fugiat\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -75123991,\n  \"pageSize\": -98222693\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5e03f4ac-d931-4049-addd-113d70016b53",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "95a9f090-82e9-46a4-b84b-2002102d887a",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "in dolor labore aliqua sint"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "6cee7425-d652-4224-ac4f-9185e39ce685",
            "name": "restrictions",
            "item": [
                {
                    "id": "cd38f746-2e90-4567-b7d4-f0bdd79ac197",
                    "name": "account",
                    "item": [
                        {
                            "id": "cf3a9f9e-4823-428b-abb0-fd8276e0b3b2",
                            "name": "Search account restrictions",
                            "request": {
                                "name": "Search account restrictions",
                                "description": {
                                    "content": "Returns an array of account restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "account"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "d55bff05-cc5b-4af5-a067-75c3459d1cfc",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  },\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 40098318,\n  \"pageSize\": 418041\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "10038839-c3cd-440b-a134-4d3baf7c114e",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "068c75dc-2cd5-495b-8494-71b1e690cf4c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "420f3ea9-067e-4446-a148-de8c66a731f4",
                            "name": "{address}",
                            "item": [
                                {
                                    "id": "33bd32cc-31ae-4018-9295-31af7cbaf427",
                                    "name": "Get the account restrictions",
                                    "request": {
                                        "name": "Get the account restrictions",
                                        "description": {
                                            "content": "Returns the account restrictions for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "cupidatat",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "f63e2aab-0115-481a-802b-4303dda31639",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"accountRestrictions\": {\n  \"version\": 1,\n  \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"restrictions\": [\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   },\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "9b00b8cf-43be-42ab-9ee6-36fa550e4ecb",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "ece5558d-6e10-4ef4-8296-ea7f665d34c7",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "6846997c-f7d9-41c4-8334-db184a8a926c",
                                    "name": "Get the account restrictions merkle",
                                    "request": {
                                        "name": "Get the account restrictions merkle",
                                        "description": {
                                            "content": "Returns the account restrictions merkle for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "cupidatat",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "cb8023ee-c2a2-486f-ad32-4b288a88375a",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "54a27869-1257-418b-acba-d860b76f108d",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "57293c88-08cb-4f55-bf9e-7318ce2f7a9a",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7baa71b0-7b44-42e3-bc2a-2e76dc29ce2b",
                    "name": "mosaic",
                    "item": [
                        {
                            "id": "0fc0fc16-a756-4019-96ab-c927a59fce46",
                            "name": "Search mosaic restrictions",
                            "request": {
                                "name": "Search mosaic restrictions",
                                "description": {
                                    "content": "Returns an array of mosaic restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by mosaic identifier.",
                                            "key": "mosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Filter by entry type.",
                                            "key": "entryType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by target address.",
                                            "key": "targetAddress",
                                            "value": "cupidatat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "4ee94db8-ffac-4167-94a0-335d5b4e692b",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"proident cillum ipsum\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"id labore adipisicing\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 9029545,\n  \"pageSize\": 69340546\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "db49a23d-c7bd-4527-946a-e84c2707c55e",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "075cebe3-4032-49b5-bbac-156efa2306fe",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "15f9e829-0424-4bbe-b7f1-248d4d67b8c8",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "42f2c1b5-5709-42c2-9c01-002626020d14",
                                    "name": "Get the mosaic restrictions",
                                    "request": {
                                        "name": "Get the mosaic restrictions",
                                        "description": {
                                            "content": "Returns the mosaic restrictions for a composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "8448520c-087a-4233-9b85-8e5664cf0257",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"sed conseq\",\n \"mosaicRestrictionEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"entryType\": \"<integer>\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"restrictions\": [\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "7662318f-1617-4098-a641-1f685a1d3d20",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "bdbe1087-955a-47e1-b83a-c58d23498f8c",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "23f7789d-ad1c-4e18-a141-da4b816c70e2",
                                    "name": "Get the mosaic restrictions merkle",
                                    "request": {
                                        "name": "Get the mosaic restrictions merkle",
                                        "description": {
                                            "content": "Returns the mosaic restrictions merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "exercitation velit officia nulla",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "1e54dc2e-f948-414c-96d2-04a762a9fd97",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"occaecat\",\n   \"encodedPath\": \"quis enim esse magna\",\n   \"nibbleCount\": 14674281,\n   \"linkMask\": \"deserunt consequat offici\",\n   \"links\": [\n    {\n     \"bit\": \"adipisicing sint laboris elit mollit\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"ut labore nostrud et\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut sunt eiusmod consequat Lorem\",\n   \"encodedPath\": \"do anim\",\n   \"nibbleCount\": 1892504,\n   \"linkMask\": \"consectetur esse\",\n   \"links\": [\n    {\n     \"bit\": \"e\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"nulla est\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "e3bb8c40-db84-4a63-b160-8e3df60c1238",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "95776716-ee2d-4a2f-a86d-b6aecaadc95f",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"occaecat veniam voluptate\",\n \"message\": \"enim sed\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "baseUrl",
            "type": "string",
            "value": "http://localhost:3000"
        }
    ],
    "info": {
        "_postman_id": "bb106086-4f7d-45b1-866d-9100de3552a9",
        "name": "Catapult REST Endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "OpenAPI Specification of catapult-rest",
            "type": "text/plain"
        }
    }
}