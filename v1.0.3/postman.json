{
    "item": [
        {
            "id": "92a910ce-ad8b-47bc-8c12-8664a52b4bbb",
            "name": "accounts",
            "item": [
                {
                    "id": "b7276d03-e90d-4bf1-9207-1a93670d4f8b",
                    "name": "Search accounts",
                    "request": {
                        "name": "Search accounts",
                        "description": {
                            "content": "Gets an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\nIf ``balance`` option is selected, the request must define the ``mosaicId`` filter.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by mosaic identifier.",
                                    "key": "mosaicId",
                                    "value": "<hex>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "b53fadea-dc0f-4786-b7df-0c6d74232ad6",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"adipisici\",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"addressHeight\": \"ex id\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"sunt velit magna\",\n    \"accountType\": 1,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"in mollit anim esse\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"esse id commodo ad\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"dolore qui irure cillum Ut\",\n    \"importanceHeight\": \"velit\"\n   }\n  },\n  {\n   \"id\": \"officia i\",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"addressHeight\": \"nulla eu pariatur nisi\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"labore\",\n    \"accountType\": 1,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"culpa fugia\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"dolor in in veniam\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"reprehende\",\n    \"importanceHeight\": \"elit Ut culpa ipsum\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 89052556,\n  \"pageSize\": -94654877\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0bf1b7c2-0b5c-4ce9-a0b9-dfc1c06d3676",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f686231d-96a6-4801-bc20-70eb0f18b543",
                    "name": "Get accounts information",
                    "request": {
                        "name": "Get accounts information",
                        "description": {
                            "content": "Returns the account information for an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"publicKeys\": [\n        \"eu magna\",\n        \"sed veniam enim ut\"\n    ],\n    \"addresses\": [\n        \"dolore ullamco anim\",\n        \"qui\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "3f8b497f-305b-4670-8ec9-f662ad7d5802",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"el\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"addressHeight\": \"veniam ut Lorem\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"velit qui\",\n   \"accountType\": 0,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"do eiusmod mollit sed\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"cillum qui consequat ut\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"ad id laboris\",\n   \"importanceHeight\": \"est Duis quis\"\n  }\n },\n {\n  \"id\": \"ipsum anim\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"addressHeight\": \"consectetur a\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"exercitation\",\n   \"accountType\": 2,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"aute et ut\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"ut consequat sint\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"laboris exer\",\n   \"importanceHeight\": \"exercitation aliqua magna officia deserunt\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "df8d0601-a9ff-4ed6-b8f4-b34746f893ed",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0555a693-064b-41dd-84bd-faa00071cbd9",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c14a8c98-23c7-4e08-862c-a5412c824842",
                    "name": "{account Id}",
                    "item": [
                        {
                            "id": "69144234-8e54-4723-a8a2-fadce1383088",
                            "name": "Get account information",
                            "request": {
                                "name": "Get account information",
                                "description": {
                                    "content": "Returns the account information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "29644504-8c03-42e8-a2be-fb7e55734af3",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"est sunt\",\n \"account\": {\n  \"version\": 1,\n  \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"addressHeight\": \"Duis\",\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"publicKeyHeight\": \"nisi\",\n  \"accountType\": 1,\n  \"supplementalPublicKeys\": {\n   \"linked\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"node\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"vrf\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"voting\": {\n    \"publicKeys\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  \"activityBuckets\": [\n   {\n    \"startHeight\": \"magna elit velit aliqua\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"startHeight\": \"eu ea Ut velit\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"mosaics\": [\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"importance\": \"deserunt anim\",\n  \"importanceHeight\": \"magna ut\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "336083d7-2f80-4a42-b709-30864a6b5eda",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a3aac83d-de1e-428e-8024-18c15bfc7b19",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d08333c4-9d29-4e77-87bc-6570bde35070",
                            "name": "Get account merkle information",
                            "request": {
                                "name": "Get account merkle information",
                                "description": {
                                    "content": "Returns the account merkle information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "e26887be-9ccf-47b5-97a5-174deeb38d64",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"sun\",\n   \"encodedPath\": \"ea sit\",\n   \"nibbleCount\": 80846204,\n   \"linkMask\": \"adipisicing eiusmod Duis veniam\",\n   \"links\": [\n    {\n     \"bit\": \"et de\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"Lorem\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"anim ut\",\n   \"encodedPath\": \"esse deserunt\",\n   \"nibbleCount\": 82868067,\n   \"linkMask\": \"velit dolore Lorem\",\n   \"links\": [\n    {\n     \"bit\": \"aliquip dolore pariatur in \",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aliquip ex veniam Lorem\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "83f267b9-b660-47a3-a794-9fbc9fd5d364",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "107ca99a-d90d-4a8c-90ae-497b52687a89",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "a56b1427-79e9-4918-b268-47e39328dfb5",
            "name": "blocks",
            "item": [
                {
                    "id": "1c17c275-34aa-4610-b85e-cd2319960f9a",
                    "name": "Search blocks",
                    "request": {
                        "name": "Search blocks",
                        "description": {
                            "content": "Gets an array of bocks.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "blocks"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by public key of the account signing the entity.",
                                    "key": "signerPublicKey",
                                    "value": "adipisicing laborum"
                                },
                                {
                                    "description": "Filter by beneficiary address.",
                                    "key": "beneficiaryAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "c799faa3-6561-42a5-8b99-3c328bafd230",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"enim Ex\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": -34617962,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 88206893,\n    \"height\": \"in\",\n    \"timestamp\": \"dolore anim Ut\",\n    \"difficulty\": \"voluptate officia Lorem\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"feeMultiplier\": 0\n   }\n  },\n  {\n   \"id\": \"magna tempor Lorem\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 22756479,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -30155510,\n    \"height\": \"magna sint fugiat\",\n    \"timestamp\": \"commodo cillum adipisicing eu dolore\",\n    \"difficulty\": \"nulla nisi labor\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"feeMultiplier\": 0\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 10624670,\n  \"pageSize\": -73375200\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c6cebd18-129d-4296-a9fc-2f87273f69f1",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b430e30b-8c15-4338-939e-2091b67a2458",
                    "name": "{height}",
                    "item": [
                        {
                            "id": "6374dd31-e1bb-4320-bd14-ed9a7b1c1b4d",
                            "name": "Get block information",
                            "request": {
                                "name": "Get block information",
                                "description": {
                                    "content": "Gets a block from the chain that has the given height.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "in dolore deserunt adipisicing",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "b2d83a6a-5cfe-42f6-9d75-74124a1ebd44",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"amet dolor velit sint nostrud\",\n \"meta\": {\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"totalFee\": \"123456\",\n  \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHashSubCacheMerkleRoots\": [\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  ],\n  \"totalTransactionsCount\": 1,\n  \"transactionsCount\": 1,\n  \"statementsCount\": 1\n },\n \"block\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": 5477806,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 46324528,\n  \"height\": \"Lorem aute cillum aliquip\",\n  \"timestamp\": \"consequat Duis\",\n  \"difficulty\": \"anim in reprehenderit dolor\",\n  \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n  \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n  \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n  \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"beneficiaryAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"feeMultiplier\": 0\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "01cda5b6-ab0a-450f-bd91-cc7827b2a1c1",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5e7d3c24-ce4b-4e8b-9718-49afcd65832c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c05d4527-8694-449b-adbc-3ea638d876e5",
                            "name": "Get the merkle path for a given a transaction and block",
                            "request": {
                                "name": "Get the merkle path for a given a transaction and block",
                                "description": {
                                    "content": "Returns the merkle path for a transaction included in a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.transactionsHash) to verify if the transaction was included in the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "transactions",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "in dolore deserunt adipisicing",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Transaction hash.",
                                            "type": "any",
                                            "value": "culpa amet",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "7342324f-3bcd-4a3f-be54-f7103d449c2f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"left\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"left\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7f8995b5-4881-4e22-9066-0753a74fae74",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "20c8ddd1-2e89-418b-9906-70c6e05fb277",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "920be48b-d2ec-4a65-8899-c1584d4db930",
                            "name": "Get the merkle path for a given a receipt statement hash and block",
                            "request": {
                                "name": "Get the merkle path for a given a receipt statement hash and block",
                                "description": {
                                    "content": "Returns the merkle path for a receipt statement or resolution linked to a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.receiptsHash) to verify if the statement was linked with the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "statements",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "in dolore deserunt adipisicing",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Receipt hash.",
                                            "type": "any",
                                            "value": "culpa amet",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "add75096-d37b-45ee-ad69-6c2b62ccd17c",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "74129e1b-d7d0-4103-9c6b-1f1885489734",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e461f510-fd05-40ea-9c0b-5e213ab5b3f1",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "b0d36942-f83e-428b-9ef3-5a99cb01a11c",
            "name": "Get the current information of the chain",
            "request": {
                "name": "Get the current information of the chain",
                "description": {
                    "content": "Returns the current information of the blockchain.\n\nThe higher the score, the better the chain.\nDuring synchronization, nodes try to get the best blockchain in the network.\n\nThe score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:\n\n    block score = difficulty − time elapsed since last block\n",
                    "type": "text/plain"
                },
                "url": {
                    "path": [
                        "chain",
                        "info"
                    ],
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                },
                "method": "GET",
                "auth": null
            },
            "response": [
                {
                    "id": "1e42315d-f8a3-4e9c-90a1-fef4d0316be1",
                    "name": "success",
                    "originalRequest": {
                        "url": {
                            "path": [
                                "chain",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                        {
                            "key": "Content-Type",
                            "value": "application/json"
                        }
                    ],
                    "body": "{\n \"height\": \"mollit aliqua veniam enim\",\n \"scoreHigh\": \"id occaecat dolore\",\n \"scoreLow\": \"anim \",\n \"latestFinalizedBlock\": {\n  \"finalizationEpoch\": 123456,\n  \"finalizationPoint\": 0,\n  \"height\": \"tempor qui amet\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                    "cookie": [],
                    "_postman_previewlanguage": "json"
                }
            ],
            "event": []
        },
        {
            "id": "3cb8bb77-a912-405c-b948-277b5dcc85db",
            "name": "finalization/proof",
            "item": [
                {
                    "id": "a232d341-40d4-49aa-bf4d-87dfc99ef9ab",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof for the greatest height associated with the given epoch.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "epoch",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Finalization epoch.",
                                    "type": "any",
                                    "value": "-22799025",
                                    "key": "epoch"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "23e2fcb1-e710-4b5f-ba66-85117d3aa451",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": -43613739,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"in velit occaecat sed magna\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"dolore laborum ut mollit amet\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"amet\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d1266fb0-d31f-453e-8eec-d4b9e6449c4d",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f5237c62-04d5-4e05-b0e5-54156f054517",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "06cd34f9-ef1b-47d3-89c6-b7fdb28818da",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof at the given height.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "height",
                                ":height"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Block height.",
                                    "type": "any",
                                    "value": "in dolore deserunt adipisicing",
                                    "key": "height"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "ebd982f3-b5c8-4ddd-b6c1-05fd643845fb",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": -36786977,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"in laborum\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"eiusmod ex amet\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"minim ex cillum elit irure\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "76518491-a031-4052-946a-3020b4313366",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d1606113-6160-40d0-8b74-11c06a872f5e",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "a3cfe7b8-1470-465d-a4a8-9692b98d6d75",
            "name": "network",
            "item": [
                {
                    "id": "d1c4ddc7-e69f-4970-ac92-bb72055255b5",
                    "name": "Get the current network type of the chain",
                    "request": {
                        "name": "Get the current network type of the chain",
                        "description": {
                            "content": "Returns the current network type.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "791925f9-5eb2-4f08-810f-2a900b696808",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"name\": \"testnet\",\n \"description\": \"catapult public test network\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "66870a3c-6d29-460b-9fd7-6f386650b73d",
                    "name": "fees",
                    "item": [
                        {
                            "id": "a2c99417-bcc5-4d82-b426-4669805fce7e",
                            "name": "Get rental fees information",
                            "request": {
                                "name": "Get rental fees information",
                                "description": {
                                    "content": "Returns the estimated effective rental fees for namespaces and mosaics.\nThis endpoint is only available if the REST instance has access to catapult-server ``resources/config-network.properties`` file.\nTo activate this feature, add the setting \"network.propertiesFilePath\" in the configuration file (rest/resources/rest.json).\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "rental"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "186027a5-7ef5-4190-a7a4-3db8bf14933d",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"effectiveRootNamespaceRentalFeePerBlock\": \"123456\",\n \"effectiveChildNamespaceRentalFee\": \"123456\",\n \"effectiveMosaicRentalFee\": \"123456\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c35f169a-8397-49e7-b746-f46d686ebeba",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d01bb993-63c4-4bf8-b036-3f116aadbbb6",
                            "name": "Get transaction fees information",
                            "request": {
                                "name": "Get transaction fees information",
                                "description": {
                                    "content": "Returns the average, median, highest and lower fee multiplier over the last \"numBlocksTransactionFeeStats\".\nThe setting \"numBlocksTransactionFeeStats\" is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "ca3ba244-089d-4755-a567-ea1cbd7a4f16",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "transaction"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"averageFeeMultiplier\": 0,\n \"medianFeeMultiplier\": 0,\n \"highestFeeMultiplier\": 0,\n \"lowestFeeMultiplier\": 0,\n \"minFeeMultiplier\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ac9ab566-0822-4b46-8526-94a849d6b8b9",
                    "name": "Get the network properties",
                    "request": {
                        "name": "Get the network properties",
                        "description": {
                            "content": "Returns the content from a catapult-server network configuration file (resources/config-network.properties).\nTo enable this feature, the REST setting \"network.propertiesFilePath\" must define where the file is located.\nThis is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network",
                                "properties"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "64fab2c0-b88e-4365-89b3-cb44cf2501bc",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"network\": {\n  \"identifier\": \"testnet\",\n  \"nodeEqualityStrategy\": \"public-key\",\n  \"nemesisSignerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"generationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"epochAdjustment\": \"1573430400s\"\n },\n \"chain\": {\n  \"enableVerifiableState\": true,\n  \"enableVerifiableReceipts\": true,\n  \"currencyMosaicId\": \"0x24F4'26B8'D549'3D4B\",\n  \"harvestingMosaicId\": \"0x1D9C'DC7E'218C'A88D\",\n  \"blockGenerationTargetTime\": \"30s\",\n  \"blockTimeSmoothingFactor\": \"3000\",\n  \"blockFinalizationInterval\": \"qui nulla commodo\",\n  \"importanceGrouping\": \"39\",\n  \"importanceActivityPercentage\": \"5\",\n  \"maxRollbackBlocks\": \"40\",\n  \"maxDifficultyBlocks\": \"60\",\n  \"defaultDynamicFeeMultiplier\": \"10'000\",\n  \"maxTransactionLifetime\": \"24h\",\n  \"maxBlockFutureTime\": \"500ms\",\n  \"initialCurrencyAtomicUnits\": \"8'998'999'998'000'000\",\n  \"maxMosaicAtomicUnits\": \"9'000'000'000'000'000\",\n  \"totalChainImportance\": \"15'000'000\",\n  \"minHarvesterBalance\": \"500\",\n  \"maxHarvesterBalance\": \"4'000'000\",\n  \"minVoterBalance\": \"50'000\",\n  \"maxVotingKeysPerAccount\": \"3\",\n  \"minVotingKeyLifetime\": \"72\",\n  \"maxVotingKeyLifetime\": \"26280\",\n  \"harvestBeneficiaryPercentage\": \"10\",\n  \"harvestNetworkPercentage\": \"5\",\n  \"harvestNetworkFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"blockPruneInterval\": \"360\",\n  \"maxTransactionsPerBlock\": \"200'000\"\n },\n \"plugins\": {\n  \"accountlink\": {\n   \"dummy\": \"pariatur\"\n  },\n  \"aggregate\": {\n   \"maxTransactionsPerAggregate\": \"1'000\",\n   \"maxCosignaturesPerAggregate\": \"15\",\n   \"enableStrictCosignatureCheck\": false,\n   \"enableBondedAggregateSupport\": true,\n   \"maxBondedTransactionLifetime\": \"48h\"\n  },\n  \"lockhash\": {\n   \"lockedFundsPerAggregate\": \"10'000'000\",\n   \"maxHashLockDuration\": \"2d\"\n  },\n  \"locksecret\": {\n   \"maxSecretLockDuration\": \"30d\",\n   \"minProofSize\": \"1\",\n   \"maxProofSize\": \"1000\"\n  },\n  \"metadata\": {\n   \"maxValueSize\": \"1024\"\n  },\n  \"mosaic\": {\n   \"maxMosaicsPerAccount\": \"10'000\",\n   \"maxMosaicDuration\": \"3650d\",\n   \"maxMosaicDivisibility\": \"6\",\n   \"mosaicRentalFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"mosaicRentalFee\": \"500\"\n  },\n  \"multisig\": {\n   \"maxMultisigDepth\": \"3\",\n   \"maxCosignatoriesPerAccount\": \"10\",\n   \"maxCosignedAccountsPerAccount\": \"5\"\n  },\n  \"namespace\": {\n   \"maxNameSize\": \"64\",\n   \"maxChildNamespaces\": \"500\",\n   \"maxNamespaceDepth\": \"3\",\n   \"minNamespaceDuration\": \"1m\",\n   \"maxNamespaceDuration\": \"365d\",\n   \"namespaceGracePeriodDuration\": \"2m\",\n   \"reservedRootNamespaceNames\": \"xem, nem, user, account, org, com, biz, net, edu, mil, gov, info\",\n   \"namespaceRentalFeeSinkAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"rootNamespaceRentalFeePerBlock\": \"1\",\n   \"childNamespaceRentalFee\": \"100\"\n  },\n  \"restrictionaccount\": {\n   \"maxAccountRestrictionValues\": \"512\"\n  },\n  \"restrictionmosaic\": {\n   \"maxMosaicRestrictionValues\": \"20\"\n  },\n  \"transfer\": {\n   \"maxMessageSize\": \"1024\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a05c806e-6ad4-4bae-8eed-f140c79b92c5",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "c92abd0d-6758-4690-82be-e4e512f1a6c0",
            "name": "node",
            "item": [
                {
                    "id": "3856ac5a-920a-4912-805c-b5c73d3a92da",
                    "name": "Get the node health information",
                    "request": {
                        "name": "Get the node health information",
                        "description": {
                            "content": "Supplies information regarding the connection and services status.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "health"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "7b44fb14-a73a-47f3-840d-bce3a49facaf",
                            "name": "Both API node and database services are reachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"up\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "91885e9d-589a-477a-aa81-23c3c642d434",
                            "name": "Either API node or database service is unavailable or unreachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"up\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2827e301-e252-4d55-939b-99ca00bac110",
                    "name": "Get the node information",
                    "request": {
                        "name": "Get the node information",
                        "description": {
                            "content": "Supplies additional information about the application running on a node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "8d71cf48-ba21-4b85-ab83-34d0350e75b4",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "info"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": 0,\n \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"roles\": 7,\n \"port\": 7900,\n \"networkIdentifier\": 144,\n \"friendlyName\": \"api-node-0\",\n \"host\": \"127.0.0.1\",\n \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d6cc118e-4ae7-4ec1-9fbe-fc4b86af8064",
                    "name": "Get peers information",
                    "request": {
                        "name": "Get peers information",
                        "description": {
                            "content": "Gets the list of peers visible by the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "peers"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "fe1302e8-c9d1-425d-a574-aed47e788e41",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "peers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n },\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "393b75fd-03c2-446e-aa2e-10753ba3529d",
                    "name": "Get the storage information of the node",
                    "request": {
                        "name": "Get the storage information of the node",
                        "description": {
                            "content": "Returns storage information about the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "storage"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2f7feba8-ba54-4518-a371-fc3301e6c1e1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "storage"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"numBlocks\": 245053,\n \"numTransactions\": 58590,\n \"numAccounts\": 177\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "06e28be1-a845-4e91-b009-dad1f2c87337",
                    "name": "Get the node time",
                    "request": {
                        "name": "Get the node time",
                        "description": {
                            "content": "Gets the node time at the moment the reply was sent and received.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "time"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "01c82aba-1127-428d-96d0-3efd37dc031d",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "time"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"communicationTimestamps\": {\n  \"sendTimestamp\": \"Duis\",\n  \"receiveTimestamp\": \"ullamco cupidatat laboris eiusmod dolore\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "893e4130-c6e7-431e-b32f-7c917ec9e46d",
                    "name": "Get the version of the running REST component",
                    "request": {
                        "name": "Get the version of the running REST component",
                        "description": {
                            "content": "Returns the version of the running catapult-rest component.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "server"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2277d05d-bd10-4269-baef-a9a953b4a90b",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "server"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"serverInfo\": {\n  \"restVersion\": \"1.0.14\",\n  \"sdkVersion\": \"0.7.14\",\n  \"deployment\": {\n   \"deploymentTool\": \"symbol-bootstrap\",\n   \"deploymentToolVersion\": \"1.0.6\",\n   \"lastUpdatedDate\": \"2021-06-02\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6166110f-647b-45d8-910c-04c510065016",
                    "name": "Get the unlocked harvesting account public keys.",
                    "request": {
                        "name": "Get the unlocked harvesting account public keys.",
                        "description": {
                            "content": "Returns array of unlocked account public keys.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "unlockedaccount"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "93139c42-3492-4862-99e0-677c51989124",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "unlockedaccount"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"unlockedAccount\": [\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "2537176d-fc54-4cb7-bc65-1d2d1125209c",
            "name": "transactions",
            "item": [
                {
                    "id": "f7f435a3-3503-473b-881e-4aec23fdd0e2",
                    "name": "Announce a new transaction",
                    "request": {
                        "name": "Announce a new transaction",
                        "description": {
                            "content": "Announces a transaction to the network.\nThe [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities.\nCatbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html). \nIt's recommended to use SDKs instead of calling the API endpoint directly to announce transactions.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"payload\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "c2fe2f7e-402d-4d2c-b7eb-e1dcc4597672",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"commodo reprehenderit qui nostrud\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "41937199-0f1a-409b-9fd2-8b26b2f67133",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2e9a0331-53c4-4d18-8c03-7bbdef0e36a0",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "085a3196-5b31-4d31-95fc-e4d33e027995",
                    "name": "confirmed",
                    "item": [
                        {
                            "id": "73a6e7cd-2594-41c9-8b74-7100ac00d3f6",
                            "name": "Search confirmed transactions",
                            "request": {
                                "name": "Search confirmed transactions",
                                "description": {
                                    "content": "Returns an array of confirmed transactions.\nIf a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that\nwas resolved from the alias at confirmation time.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "adipisicing laborum"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "9c06ed24-a32b-4513-8c41-5f1e0345b013",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"consequat Ut\",\n   \"meta\": {\n    \"height\": \"magna incididunt do ex dolor\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 85718384,\n    \"timestamp\": \"nis\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 91115842,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -10731731,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"non anim exercitation Excepteur\",\n   \"meta\": {\n    \"height\": \"fugiat commodo\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -36798324,\n    \"timestamp\": \"consequat sint\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 63425464,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -94944687,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -43864640,\n  \"pageSize\": 83217712\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "aed292d8-1027-46e0-ac31-332705d7c98d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "34f289f7-2f89-4c09-afce-613ed009408b",
                            "name": "Get confirmed trasactions information",
                            "request": {
                                "name": "Get confirmed trasactions information",
                                "description": {
                                    "content": "Returns confirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "bb7b3b46-890c-43d8-b1f6-cc13cd44dbed",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"proident\",\n  \"meta\": {\n   \"height\": \"in occaecat\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 55079400,\n   \"timestamp\": \"exercitation nostrud\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 15595788,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 6688301,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"sit in anim Excepteur\",\n  \"meta\": {\n   \"height\": \"in labore voluptate dolor in\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 19426699,\n   \"timestamp\": \"mollit pariatur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -64358038,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -79977389,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "253991c2-6482-450a-a17a-4e9e9fbc6ba5",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "deca1a90-d9a6-40f5-8341-a850d65cff02",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4017b093-4096-448f-a646-fb98c0d0c994",
                            "name": "Get confirmed transaction information",
                            "request": {
                                "name": "Get confirmed transaction information",
                                "description": {
                                    "content": "Returns confirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "173906f1-3072-42d4-ae6d-8c290110c128",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"labore magna\",\n \"meta\": {\n  \"height\": \"in id\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 37345442,\n  \"timestamp\": \"sunt ad laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35239733,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": -59936189,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "97e7f740-ea7d-458d-aa8a-5aba9f29f841",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e102faf7-e8af-4d5f-91d6-3ab2c89f6b5d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bb0b332c-df71-4a9d-bb59-986e533439d7",
                    "name": "unconfirmed",
                    "item": [
                        {
                            "id": "cb5890a6-491e-4172-be64-e411623d79ee",
                            "name": "Search unconfirmed transactions",
                            "request": {
                                "name": "Search unconfirmed transactions",
                                "description": {
                                    "content": "Returns an array of unconfirmed transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "adipisicing laborum"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "849a6b3d-9e86-4723-8cd0-a9e887d798a9",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"ullamco\",\n   \"meta\": {\n    \"height\": \"cillum laborum velit ullamco\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 27018104,\n    \"timestamp\": \"sunt irure amet\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 66671886,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -73162593,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"sed\",\n   \"meta\": {\n    \"height\": \"laboris\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 4789015,\n    \"timestamp\": \"in nisi\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": -37686633,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 26138117,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 89997023,\n  \"pageSize\": -99011654\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "aae12199-8c05-4eb8-9407-a8029a6c5fcc",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "07758e1a-34fc-4f3a-83d0-522e6ac2981a",
                            "name": "Get unconfirmed trasactions information",
                            "request": {
                                "name": "Get unconfirmed trasactions information",
                                "description": {
                                    "content": "Returns unconfirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a0fd3f27-cf15-4963-9ee5-02eff2154437",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"proident\",\n  \"meta\": {\n   \"height\": \"in occaecat\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 55079400,\n   \"timestamp\": \"exercitation nostrud\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 15595788,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 6688301,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"sit in anim Excepteur\",\n  \"meta\": {\n   \"height\": \"in labore voluptate dolor in\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 19426699,\n   \"timestamp\": \"mollit pariatur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -64358038,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -79977389,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "50d2fcea-c0f8-4569-bc45-dc0e4d0e319c",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "352a099c-1819-458d-a666-dd9b83c0096c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "977a940e-0596-4467-b0df-45bab51e4215",
                            "name": "Get unconfirmed transaction information",
                            "request": {
                                "name": "Get unconfirmed transaction information",
                                "description": {
                                    "content": "Returns unconfirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "0f8bd616-a555-4afa-8224-6f281dde8fc9",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"labore magna\",\n \"meta\": {\n  \"height\": \"in id\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 37345442,\n  \"timestamp\": \"sunt ad laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35239733,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": -59936189,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fff29fd4-21dd-4a2b-835a-dd5f7eff13b3",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e41ca7d9-1666-4c8d-9a15-8b7fa5dd028e",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2d8ce654-f5d5-4681-a04d-f30d6fcc6481",
                    "name": "partial",
                    "item": [
                        {
                            "id": "0e8ff979-e712-4f63-8bbf-766413ba3f2d",
                            "name": "Search partial transactions",
                            "request": {
                                "name": "Search partial transactions",
                                "description": {
                                    "content": "Returns an array of partial transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "adipisicing laborum"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "et cupidatat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "5655ce4d-608a-4870-8878-b2a5a2f0b495",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"ullamco\",\n   \"meta\": {\n    \"height\": \"cillum laborum velit ullamco\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 27018104,\n    \"timestamp\": \"sunt irure amet\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 66671886,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -73162593,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"sed\",\n   \"meta\": {\n    \"height\": \"laboris\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": 4789015,\n    \"timestamp\": \"in nisi\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": -37686633,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 26138117,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 89997023,\n  \"pageSize\": -99011654\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "095b4d09-25eb-4f5a-abe4-c3dfff00bd92",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4cf1a27d-15f1-4bec-8b55-7203657b766d",
                            "name": "Announce an aggregate bonded transaction",
                            "request": {
                                "name": "Announce an aggregate bonded transaction",
                                "description": {
                                    "content": "Announces an aggregate bonded transaction to the network.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"payload\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "330156a2-4c60-42b8-8346-f49d3c6f5869",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Accepted",
                                    "code": 202,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"message\": \"commodo reprehenderit qui nostrud\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fef838b9-be0a-4fc1-9e4a-a6f9da0b1a89",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f5285a87-b09d-4ff8-a7ee-2d955d6a1e2b",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "92ece0e2-f9d0-4857-9bd0-767332d33dfe",
                            "name": "Get partial trasactions information",
                            "request": {
                                "name": "Get partial trasactions information",
                                "description": {
                                    "content": "Returns partial transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "d9f117d6-a419-44d1-b702-d724fb4bd0ed",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"proident\",\n  \"meta\": {\n   \"height\": \"in occaecat\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 55079400,\n   \"timestamp\": \"exercitation nostrud\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 15595788,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 6688301,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"sit in anim Excepteur\",\n  \"meta\": {\n   \"height\": \"in labore voluptate dolor in\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 19426699,\n   \"timestamp\": \"mollit pariatur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -64358038,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": -79977389,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6a2859c2-5c82-472d-8c27-56f5bb0dfde6",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "99ccb04b-7722-46c9-93ce-c85b22173702",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "91cd93b7-e8c4-4d83-838a-ab61d4ea6fca",
                            "name": "Get partial transaction information",
                            "request": {
                                "name": "Get partial transaction information",
                                "description": {
                                    "content": "Returns partial transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "16b26c00-9c65-42ba-bed9-26da33de45f2",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"labore magna\",\n \"meta\": {\n  \"height\": \"in id\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 37345442,\n  \"timestamp\": \"sunt ad laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35239733,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": -59936189,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "24207b20-ba1e-4fa4-86e3-a8681b3d1f21",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ed7b4099-8edd-478f-a8c5-40acad76c059",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fc8f6f1b-5ce7-4af5-b72f-15f14e712952",
                    "name": "Announce a cosignature transaction",
                    "request": {
                        "name": "Announce a cosignature transaction",
                        "description": {
                            "content": "Announces a cosignature transaction to the network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions",
                                "cosignature"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"parentHash\": \"non ess\",\n    \"signature\": \"<string>\",\n    \"signerPublicKey\": \"qui dolore aliqua dolor occaecat\",\n    \"version\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "28d782f3-32d5-4ee7-83d2-e5fb1254d8f5",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"commodo reprehenderit qui nostrud\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5cd83f48-53ff-4bc4-b772-28d93d9e8fb0",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "726fba21-9ece-4c77-8af2-80cee8f9e26e",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "dca16a50-f895-4331-bbf2-5382280cb08c",
            "name": "transaction Status",
            "item": [
                {
                    "id": "2d99448a-161a-493a-82fa-dd95b8a896a3",
                    "name": "Get transaction statuses",
                    "request": {
                        "name": "Get transaction statuses",
                        "description": {
                            "content": "Returns an array of transaction statuses for a given array of transaction hashes.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"hashes\": [\n        \"par\",\n        \"labore sint do in velit\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "b5eacaea-6740-47e3-8ab9-dbf8363c3122",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"group\": \"partial\",\n  \"deadline\": \"dolore eiusmod dolor\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_Core_Invalid_Link_Range\",\n  \"height\": \"aliquip minim\"\n },\n {\n  \"group\": \"unconfirmed\",\n  \"deadline\": \"dolo\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_Aggregate_Too_Many_Transactions\",\n  \"height\": \"velit incididunt\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6ad45bb5-f713-4c35-8344-a10682e2aef9",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e96adaae-3187-4719-92ef-7bd50af6a5a4",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c6815666-ae64-49c1-95fe-9b651be647a6",
                    "name": "Get transaction status",
                    "request": {
                        "name": "Get transaction status",
                        "description": {
                            "content": "Returns the transaction status for a given hash.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus",
                                ":hash"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Transaction hash.",
                                    "type": "any",
                                    "value": "culpa amet",
                                    "key": "hash"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "4867e44a-26fa-4b2a-ac7c-facb74546942",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"group\": \"unconfirmed\",\n \"deadline\": \"nostrud est\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"code\": \"Failure_LockHash_Invalid_Duration\",\n \"height\": \"i\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d5cd53a1-3ac8-42bb-8bc0-ccc3deb26aa6",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0aec434d-37b7-4767-8e6c-53b1e86cc25a",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "14e50b4b-4b7c-42c3-ab4b-f2adf3d5e7b8",
            "name": "lock",
            "item": [
                {
                    "id": "49326d48-5f20-4190-9913-1045ff998f7c",
                    "name": "hash",
                    "item": [
                        {
                            "id": "bf7571ba-c783-4ac9-b08f-269d28b79eb4",
                            "name": "Search hash lock entries",
                            "request": {
                                "name": "Search hash lock entries",
                                "description": {
                                    "content": "Returns an array of hash locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "a3be8c3e-ef9a-4741-9846-5d19ac3ed25a",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"consequat et eu\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"id do\",\n    \"status\": 1,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"labore reprehenderit in aute\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"in sit\",\n    \"status\": 0,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -77170070,\n  \"pageSize\": 82832450\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7df15ddd-aeae-461b-8180-a3725cc3913d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ce817f13-bdbf-490e-849c-41ffb7f4b892",
                            "name": "{hash}",
                            "item": [
                                {
                                    "id": "18cfea7f-3f0a-492b-9063-71a3a2875062",
                                    "name": "Get hash lock information",
                                    "request": {
                                        "name": "Get hash lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "2e0cef58-a47a-4e35-a4a9-64fa9a22614f",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"exercitation minim do aute nostrud\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"tempor\",\n  \"status\": 0,\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "f63e901f-e3e0-48c6-892d-d173fdf3a2f3",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "c1037a2a-ee2a-440e-ad72-35aabd5838ef",
                                    "name": "Get hash lock merkle information",
                                    "request": {
                                        "name": "Get hash lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "90fcfc9a-c022-4649-8fa2-d23231947f02",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "0c18aafb-492f-4cf8-8c66-e921030e0e7a",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a14ac6dd-dc60-4f0d-9aec-7eda8a32c07b",
                    "name": "secret",
                    "item": [
                        {
                            "id": "fe54248e-6fa2-46e1-97d6-fdb476dbd62d",
                            "name": "Search secret lock entries",
                            "request": {
                                "name": "Search secret lock entries",
                                "description": {
                                    "content": "Returns an array of secret locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "secret"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Filter by secret.",
                                            "key": "secret",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "8a31f401-ae1f-4206-aa53-1e4448ccad4c",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"fugiat sint\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"Lorem cillum\",\n    \"status\": 1,\n    \"hashAlgorithm\": 0,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"Duis dolore ut\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"nostrud aliquip elit dolor\",\n    \"status\": 0,\n    \"hashAlgorithm\": 1,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -94775646,\n  \"pageSize\": -45206690\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "19bc0998-a3de-4ff2-8b1d-9e555310ddf0",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9c8340ce-0905-4fbd-9619-409929c361e9",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "79561a98-5a69-405e-a243-94fd1af7bb8a",
                                    "name": "Get secret lock information",
                                    "request": {
                                        "name": "Get secret lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "a9587c3a-bf8c-4cbf-9190-460edad6ffc1",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"aliquip fugiat mollit et\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"anim ad deserunt\",\n  \"status\": 0,\n  \"hashAlgorithm\": 2,\n  \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n  \"recipientAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "3b2ba8af-da81-4c11-b99a-c5ab1d82ef80",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "48ebb068-eb19-4533-a57b-2261d0096889",
                                    "name": "Get secret lock merkle information",
                                    "request": {
                                        "name": "Get secret lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "9bf19167-0a25-400e-84c9-9272ce979ec0",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "715fee2b-4c1f-465f-bb3e-c23fcbe80b13",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "8ac4b2ea-ff47-4c03-8733-2c89476fbd20",
            "name": "metadata",
            "item": [
                {
                    "id": "7a188849-9061-424b-8086-fefa39483702",
                    "name": "Search metadata entries",
                    "request": {
                        "name": "Search metadata entries",
                        "description": {
                            "content": "Returns an array of metadata.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "metadata"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by address sending the metadata entry.",
                                    "key": "sourceAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Filter by metadata key.",
                                    "key": "scopedMetadataKey",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by namespace or mosaic id.",
                                    "key": "targetId",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by metadata type.",
                                    "key": "metadataType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "624b8fa6-0519-47fa-a26e-3b8c333c110f",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"aliquip amet reprehenderi\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"sit cupidatat\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  },\n  {\n   \"id\": \"anim ut veniam culpa\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"sint incididunt esse minim\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 35415070,\n  \"pageSize\": 20136443\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d824f500-2d6f-4c17-b3c5-83044dbc1f82",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "854f77fb-558c-4de4-8c5f-7bf340cf27f4",
                    "name": "{composite Hash}",
                    "item": [
                        {
                            "id": "76d1fdd9-36d1-48c9-82d6-c53359ecd237",
                            "name": "Get metadata information",
                            "request": {
                                "name": "Get metadata information",
                                "description": {
                                    "content": "Gets the metadata for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "culpa amet",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "a8fa8a0e-8415-4a27-a255-8ad697395425",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"sunt nulla Lorem\",\n \"metadataEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"sourceAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n  \"metadataType\": \"<integer>\",\n  \"value\": \"minim incididunt eiusmod culpa\",\n  \"targetId\": \"0DC67FBE1CAD29E3\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "67016bd2-aba1-4bb2-bc4d-bcd597851648",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3b0c99b2-cf73-4d7e-b346-8c9161e07dfb",
                            "name": "Get metadata merkle information",
                            "request": {
                                "name": "Get metadata merkle information",
                                "description": {
                                    "content": "Gets the metadata merkle for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "culpa amet",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "888a2b74-b310-40f1-b6df-d4b4d6e1dfd5",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "34af2cc9-eeaa-435e-a16d-c5b344c2895f",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "4753a31c-e898-47df-95ce-a172cc7b3888",
            "name": "mosaics",
            "item": [
                {
                    "id": "5596e575-734e-4722-bc9d-c8c6b744367a",
                    "name": "Search mosaics",
                    "request": {
                        "name": "Search mosaics",
                        "description": {
                            "content": "Gets an array of mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "4b82c06a-c71c-4c12-9d15-68bb8cf7c609",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"dolor ea enim\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"in sint dolor qui\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"revision\": 2222212828,\n    \"flags\": -15062208,\n    \"divisibility\": 12114610,\n    \"duration\": \"sint tempor qui\"\n   }\n  },\n  {\n   \"id\": \"labore\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"aliqua cillum sint nostrud\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"revision\": 2222212828,\n    \"flags\": -83079658,\n    \"divisibility\": -59580211,\n    \"duration\": \"Excepteur veniam in\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -93810582,\n  \"pageSize\": -61685224\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "47fa1b6e-d807-4824-93e7-ab183b5581b7",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3952532f-46e7-4a00-9749-58af99ae4f5e",
                    "name": "Get mosaics information for an array of mosaics",
                    "request": {
                        "name": "Get mosaics information for an array of mosaics",
                        "description": {
                            "content": "Gets an array of mosaic definition.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "bd0cd838-66fd-4894-9155-0b6a56278ec3",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"Excepteur in pariatur Lorem\",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"consequat aliqua deserunt in id\",\n   \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"revision\": 2222212828,\n   \"flags\": -71976594,\n   \"divisibility\": -76919525,\n   \"duration\": \"ad\"\n  }\n },\n {\n  \"id\": \"officia est ad\",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"Lorem velit amet\",\n   \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"revision\": 2222212828,\n   \"flags\": 98173601,\n   \"divisibility\": -82150697,\n   \"duration\": \"sit eiusmod et velit\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "137d078b-e403-4f98-b214-a7d01e9b767d",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "96a65851-ece2-4731-a691-b4145d186564",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6c929acd-5005-435d-a6e0-52488b8c3615",
                    "name": "{mosaic Id}",
                    "item": [
                        {
                            "id": "4b6acfe6-8b0d-4ac2-9bae-1ce89ae54360",
                            "name": "Get mosaic information",
                            "request": {
                                "name": "Get mosaic information",
                                "description": {
                                    "content": "Gets the mosaic definition for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "dda84ce6-d4ec-498f-8ca3-74ff08943f0f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"aliqua nisi\",\n \"mosaic\": {\n  \"version\": 1,\n  \"id\": \"0DC67FBE1CAD29E3\",\n  \"supply\": \"123456\",\n  \"startHeight\": \"minim ad sint fugiat Lorem\",\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"revision\": 2222212828,\n  \"flags\": 64362710,\n  \"divisibility\": 12363830,\n  \"duration\": \"sunt esse ut sint\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c35b5b35-ff33-4f1f-9431-ffadfcd2693d",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "edf05b87-acc1-47a6-b942-e94f12685818",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "796e4162-6914-447b-ac8d-5a570f17f4b5",
                            "name": "Get mosaic merkle information",
                            "request": {
                                "name": "Get mosaic merkle information",
                                "description": {
                                    "content": "Gets the mosaic definition merkle for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "9d8472f2-7cbd-475b-8a51-eba92d670e10",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e4d6351a-4cff-442a-b4cc-d5624af955ec",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cafc37b3-b600-45f3-8c2d-1020948a5254",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "4984dae2-08ab-4cc4-a949-973565749a2a",
            "name": "account/{address}/multisig",
            "item": [
                {
                    "id": "46fab8b0-8c6b-4b73-95c1-0c5e4681b1e8",
                    "name": "Get multisig account information",
                    "request": {
                        "name": "Get multisig account information",
                        "description": {
                            "content": "Returns the multisig account information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "officia esse minim fugiat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9f238b77-8bf9-401a-9907-2704f0da05d1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"multisig\": {\n  \"version\": 1,\n  \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"minApproval\": 2222212828,\n  \"minRemoval\": 2222212828,\n  \"cosignatoryAddresses\": [\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  ],\n  \"multisigAddresses\": [\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  ]\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fb17e75c-abd0-484f-9470-c1c0f143f2d1",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "dcbad9ce-5645-4b27-a1b7-a3517d6a8c46",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cc801aaa-6e5f-45bd-9877-0b417090bfc5",
                    "name": "Get multisig account merkle information",
                    "request": {
                        "name": "Get multisig account merkle information",
                        "description": {
                            "content": "Returns the multisig account merkle information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "merkle"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "officia esse minim fugiat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "6c8218bc-203e-44c3-b801-afd263da4af6",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "641fd76b-8191-42f5-a1a2-73e75bb225d1",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "356eef7b-c8f9-4a61-b2c6-78b233533678",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "099016e5-d8fd-4b81-af91-091dee01dac8",
                    "name": "Get multisig account graph information",
                    "request": {
                        "name": "Get multisig account graph information",
                        "description": {
                            "content": "Returns the multisig account graph.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "graph"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "officia esse minim fugiat",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "afe4423a-b887-4926-9b37-19b97fb5442b",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   }\n  ]\n },\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ],\n     \"multisigAddresses\": [\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n      \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n     ]\n    }\n   }\n  ]\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "19c3f610-c7be-4b4e-91cd-9cb9af318ac9",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8f901dc3-edf7-44d2-8341-bbacf7708228",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "a5afa989-39b4-4fed-8353-8eb60d0c8816",
            "name": "namespaces",
            "item": [
                {
                    "id": "fa04c2cc-3546-4f15-82c9-123b8ea27524",
                    "name": "Search namespaces",
                    "request": {
                        "name": "Search namespaces",
                        "description": {
                            "content": "Gets an array of namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Filter by registration type.",
                                    "key": "registrationType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by root namespace.",
                                    "key": "level0",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by alias type.",
                                    "key": "aliasType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "3bda000d-e30b-460d-82db-4b781b2bc134",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"tempor cillum quis est\",\n   \"meta\": {\n    \"active\": true,\n    \"index\": 13915885\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"startHeight\": \"in aute cupidatat reprehenderit\",\n    \"endHeight\": \"cupidatat \",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  },\n  {\n   \"id\": \"ex aliqua culpa\",\n   \"meta\": {\n    \"active\": true,\n    \"index\": -47103700\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"startHeight\": \"adipisicing con\",\n    \"endHeight\": \"consequat\",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 70270868,\n  \"pageSize\": -53579154\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5287a1e8-8c9d-4889-a72f-fba3363094b0",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a6adc8f4-6ee6-473a-ab9d-eb20d844eb42",
                    "name": "{namespace Id}",
                    "item": [
                        {
                            "id": "ad45c682-953e-4a3c-9781-c2acccb52a54",
                            "name": "Get namespace information",
                            "request": {
                                "name": "Get namespace information",
                                "description": {
                                    "content": "Gets the namespace for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "fccd4e37-f5fa-41e5-9b6c-19463d6019d5",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"veniam\",\n \"meta\": {\n  \"active\": true,\n  \"index\": 72065291\n },\n \"namespace\": {\n  \"version\": 1,\n  \"registrationType\": 0,\n  \"depth\": 1,\n  \"level0\": \"85BBEA6CC462B244\",\n  \"alias\": {\n   \"type\": 0,\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\"\n  },\n  \"parentId\": \"85BBEA6CC462B244\",\n  \"ownerAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"startHeight\": \"dolor aliqua officia mollit\",\n  \"endHeight\": \"qui adip\",\n  \"level1\": \"85BBEA6CC462B244\",\n  \"level2\": \"85BBEA6CC462B244\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fa6ebc64-02ca-49c4-9b8c-1f79cfed0477",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "23c5d693-da51-4aeb-b453-a2b74f42c3a6",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a140873c-fbb6-469f-b954-f2642259bdc8",
                            "name": "Get namespace merkle information",
                            "request": {
                                "name": "Get namespace merkle information",
                                "description": {
                                    "content": "Gets the namespace merkle for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "f4228de9-21c6-46cf-9c20-dacb51af14a6",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a6387715-bcb6-42b9-892c-8224415ffbe9",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "aab6ce73-7ce9-4233-a7a8-b6e9afc500ce",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a18e06f2-42f5-4935-9123-2e089e3acaf4",
                    "name": "Get readable names for a set of namespaces",
                    "request": {
                        "name": "Get readable names for a set of namespaces",
                        "description": {
                            "content": "Returns friendly names for namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"namespaceIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "99f86d81-d2d9-49f4-aa96-aa73799b4281",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n },\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0e626487-5f70-4b8f-8ae8-962e2ad08b79",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e71e68b0-b363-4d1a-87d7-2e9846e1d2e0",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b37d9ba6-8c89-4a53-b8c4-8bdb78c3a105",
                    "name": "Get readable names for a set of accountIds",
                    "request": {
                        "name": "Get readable names for a set of accountIds",
                        "description": {
                            "content": "Returns friendly names for accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "account",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"addresses\": [\n        \"sed Lorem consecte\",\n        \"magna reprehenderit\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "f0d1d4bf-9a53-48c5-96dd-858a30c46661",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"accountNames\": [\n  {\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  },\n  {\n   \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "dd317129-5670-4a15-b712-112a3c134ea8",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "75a61cc5-2538-4f99-b4ce-d4a9fd0d9815",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7206f5cb-4876-40bd-9f40-134144e6d89d",
                    "name": "Get readable names for a set of mosaics",
                    "request": {
                        "name": "Get readable names for a set of mosaics",
                        "description": {
                            "content": "Returns friendly names for mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "mosaic",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "1d4b7fb4-5f01-4a15-90d9-f7c4d568b935",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"mosaicNames\": [\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  },\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "af8895fa-ddd4-47a3-87cd-856435717f2f",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5c49afb6-4903-4fd2-81d0-3f4e52456df1",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "681f4250-4aa9-4236-a567-285f9cda354a",
            "name": "statements",
            "item": [
                {
                    "id": "ae205388-e608-4b23-923e-a131623756a6",
                    "name": "Search transaction statements",
                    "request": {
                        "name": "Search transaction statements",
                        "description": {
                            "content": "Gets an array of transaction statements.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "statements",
                                "transaction"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by block height.",
                                    "key": "height",
                                    "value": "in dolore deserunt adipisicing"
                                },
                                {
                                    "description": "Only blocks with height greater or equal than this one are returned.",
                                    "key": "fromHeight",
                                    "value": "in dolore deserunt adipisicing"
                                },
                                {
                                    "description": "Only blocks with height smaller or equal than this one are returned.",
                                    "key": "toHeight",
                                    "value": "in dolore deserunt adipisicing"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by address of the account receiving the transaction.",
                                    "key": "recipientAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Filter by address sending mosaics.",
                                    "key": "senderAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "officia esse minim fugiat"
                                },
                                {
                                    "description": "Mosaic or namespace identifier",
                                    "key": "artifactId",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "b83419d6-6321-4b2b-ad90-1047351dcc5e",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"sit consequat officia consectetur\",\n   \"meta\": {\n    \"timestamp\": \"reprehenderit quis\"\n   },\n   \"statement\": {\n    \"height\": \"exercitation nisi\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  },\n  {\n   \"id\": \"consequat sunt laborum occaecat\",\n   \"meta\": {\n    \"timestamp\": \"in velit minim cupidatat\"\n   },\n   \"statement\": {\n    \"height\": \"ut in\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 57331724,\n  \"pageSize\": 61857078\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f8ca8715-7a5e-40b4-b2fd-a4b187195268",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6606da62-f1e6-4636-ba51-77a9bd09196b",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "et aute tempor"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3d60f18d-e3f7-4c7f-87a7-c05f637163c3",
                    "name": "resolutions",
                    "item": [
                        {
                            "id": "fb33f5ad-3b68-453a-9ed2-6c53ffd7c05d",
                            "name": "Get receipts address resolution statements",
                            "request": {
                                "name": "Get receipts address resolution statements",
                                "description": {
                                    "content": "Gets an array of address resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "address"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "02f78f90-3beb-4aca-a714-392f690ebac0",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"incididunt cupidatat\",\n   \"meta\": {\n    \"timestamp\": \"incid\"\n   },\n   \"statement\": {\n    \"height\": \"ut id sunt\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"esse aliqua in amet ullamco\",\n   \"meta\": {\n    \"timestamp\": \"eiusmod consequat fugiat\"\n   },\n   \"statement\": {\n    \"height\": \"ut tempor in culpa\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 45123300,\n  \"pageSize\": -75582157\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "688c2467-d23b-4a94-b0dc-5ecf533cf5ad",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d60a32aa-02e8-4337-9a7d-b440d5e8a46a",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1ccc7907-9ca6-4574-ad40-ccfc18b29bb0",
                            "name": "Get receipts mosaic resolution statements",
                            "request": {
                                "name": "Get receipts mosaic resolution statements",
                                "description": {
                                    "content": "Gets an array of mosaic resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "in dolore deserunt adipisicing"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "400645e9-e4a8-4d4d-bc1a-9eaf56151a9e",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"dolore dolor qui esse ali\",\n   \"meta\": {\n    \"timestamp\": \"exercitation deserunt\"\n   },\n   \"statement\": {\n    \"height\": \"aliqua qui esse ut exercitation\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"aliquip qui\",\n   \"meta\": {\n    \"timestamp\": \"deserunt cupidatat eiusmod\"\n   },\n   \"statement\": {\n    \"height\": \"consequat \",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 14704131,\n  \"pageSize\": -27186623\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b31abcc5-d233-4971-8760-0fb6e7ff8b32",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2b7abce5-9f41-4db1-b931-eca44c1ba63c",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "et aute tempor"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "16d5d29d-d57d-4d56-9ff6-be1e085fdee4",
            "name": "restrictions",
            "item": [
                {
                    "id": "16698ae0-ae70-4a77-9646-c147d40bef5f",
                    "name": "account",
                    "item": [
                        {
                            "id": "8b518954-f596-4caa-ab31-f0f0b8800401",
                            "name": "Search account restrictions",
                            "request": {
                                "name": "Search account restrictions",
                                "description": {
                                    "content": "Returns an array of account restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "account"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction.\nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "d11e017f-5af3-445a-a311-1d99c04907b9",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  },\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 31576068,\n  \"pageSize\": 74894528\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "26b4a8c5-5f03-46ab-963f-cb29547921f4",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "20a715dc-e573-4b31-a104-481a73ac5017",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3886329e-0a4a-49a1-9fb0-6778525cb620",
                            "name": "{address}",
                            "item": [
                                {
                                    "id": "543c6613-260e-4195-a638-20fbbd6e1506",
                                    "name": "Get the account restrictions",
                                    "request": {
                                        "name": "Get the account restrictions",
                                        "description": {
                                            "content": "Returns the account restrictions for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "officia esse minim fugiat",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "5d394dd7-ee80-48d1-beab-f80dc80e5d25",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"accountRestrictions\": {\n  \"version\": 1,\n  \"address\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"restrictions\": [\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   },\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "5614d853-375a-4fdf-89e5-9d5f33edc621",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "f200dd94-f0a6-41a9-91b8-17661f1b0a1e",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "2049728c-7c49-49dc-9d47-441edcf4ce57",
                                    "name": "Get the account restrictions merkle",
                                    "request": {
                                        "name": "Get the account restrictions merkle",
                                        "description": {
                                            "content": "Returns the account restrictions merkle for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "officia esse minim fugiat",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "5778dfb6-8cc3-4aa7-a3a4-adde333aa886",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "26400df0-f511-4907-b157-35e32f911178",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "0f067f8c-a3c2-42db-9916-9e22060f4a23",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a89014ff-919d-413d-97ae-a5faf8d41ad3",
                    "name": "mosaic",
                    "item": [
                        {
                            "id": "c03311f4-a6b1-4afb-8309-d643107980c5",
                            "name": "Search mosaic restrictions",
                            "request": {
                                "name": "Search mosaic restrictions",
                                "description": {
                                    "content": "Returns an array of mosaic restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by mosaic identifier.",
                                            "key": "mosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Filter by entry type.",
                                            "key": "entryType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by target address.",
                                            "key": "targetAddress",
                                            "value": "officia esse minim fugiat"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "042145cb-758f-47a9-9543-267ef7da1b7b",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"Duis eu Excepteur voluptate\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"aute enim Excepteur laborum\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -3731454,\n  \"pageSize\": -44606584\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7b5c13dd-a160-4acb-8aab-ac45aca03081",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9afdb61f-1841-4bf0-981a-d6efcbc34543",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d7e89488-e1fe-4c1d-a052-f5c110d6e98f",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "802e3b60-c34d-48ce-a215-c499143dedee",
                                    "name": "Get the mosaic restrictions",
                                    "request": {
                                        "name": "Get the mosaic restrictions",
                                        "description": {
                                            "content": "Returns the mosaic restrictions for a composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "25deae8e-f10b-4e4a-b34a-3da872c2b88b",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"\",\n \"mosaicRestrictionEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"entryType\": \"<integer>\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"targetAddress\": \"TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY\",\n  \"restrictions\": [\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "069f8558-fdbf-4c7d-b59a-cabe19ba5ab7",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "26a694f2-45a8-447f-8b6a-f19f4f82fc0a",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "a226c458-ca7c-4108-b060-39d2b715702a",
                                    "name": "Get the mosaic restrictions merkle",
                                    "request": {
                                        "name": "Get the mosaic restrictions merkle",
                                        "description": {
                                            "content": "Returns the mosaic restrictions merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "culpa amet",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "3cd1bae0-307a-45c5-b44b-07c353a885c5",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"eu amet laboris ad\",\n   \"encodedPath\": \"consectetur occaecat nostrud in\",\n   \"nibbleCount\": 86897041,\n   \"linkMask\": \"Lorem ipsum do culpa\",\n   \"links\": [\n    {\n     \"bit\": \"in\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"consequat occ\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"dolore ex adipisicing pariatur minim\",\n   \"encodedPath\": \"ut in officia id esse\",\n   \"nibbleCount\": -55836779,\n   \"linkMask\": \"minim tempor proident\",\n   \"links\": [\n    {\n     \"bit\": \"magna officia eiusmod ullamco\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"dolor in ex amet eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "7b8d8e3d-013e-4d12-9cec-9829fe14c1e2",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "66c93505-c035-47c9-a577-a3dfd53d1834",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"fugiat pariatur cupidatat ad\",\n \"message\": \"voluptate\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "baseUrl",
            "type": "string",
            "value": "http://localhost:3000"
        }
    ],
    "info": {
        "_postman_id": "98e79321-33ad-4ed7-ac1f-d83ed186b4c4",
        "name": "Catapult REST Endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "OpenAPI Specification of catapult-rest",
            "type": "text/plain"
        }
    }
}