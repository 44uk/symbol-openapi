{
    "item": [
        {
            "id": "f96956af-0728-423c-b61b-dac9b560ab54",
            "name": "accounts",
            "item": [
                {
                    "id": "78d3e5c2-0e8b-4845-9a34-df5623d80319",
                    "name": "Search accounts",
                    "request": {
                        "name": "Search accounts",
                        "description": {
                            "content": "Gets an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\nIf ``balance`` option is selected, the request must define the ``mosaicId`` filter.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by mosaic identifier.",
                                    "key": "mosaicId",
                                    "value": "<hex>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "15ce13e9-f8f4-4e30-8508-670f42017748",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"ipsum sunt consecte\",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"addressHeight\": \"laborum sit do eiusmod Lorem\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"tempor nulla\",\n    \"accountType\": 1,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"sed eu ad mollit\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"dolor dolore mollit dolor\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"nisi mollit cu\",\n    \"importanceHeight\": \"labore\"\n   }\n  },\n  {\n   \"id\": \"dolore nisi sunt sint\",\n   \"account\": {\n    \"version\": 1,\n    \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"addressHeight\": \"consectetur c\",\n    \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"publicKeyHeight\": \"officia\",\n    \"accountType\": 1,\n    \"supplementalPublicKeys\": {\n     \"linked\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"node\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"vrf\": {\n      \"publicKey\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"voting\": {\n      \"publicKeys\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    \"activityBuckets\": [\n     {\n      \"startHeight\": \"occaecat Excepteur\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"startHeight\": \"d\",\n      \"totalFeesPaid\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beneficiaryCount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rawScore\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"mosaics\": [\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"id\": \"0DC67FBE1CAD29E3\",\n      \"amount\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ],\n    \"importance\": \"commodo ex\",\n    \"importanceHeight\": \"ullamco commodo\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 52983627,\n  \"pageSize\": -2479296\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f6877a3f-d4e4-437e-8af5-e6ee645e7448",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "mosaicId",
                                            "value": "0DC67FBE1CAD29E3"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0ba0293d-be0b-4f71-bce3-4aff53eb00a0",
                    "name": "Get accounts information",
                    "request": {
                        "name": "Get accounts information",
                        "description": {
                            "content": "Returns the account information for an array of accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "accounts"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"publicKeys\": [\n        \"labore quis\",\n        \"Excepteur deserunt sed\"\n    ],\n    \"addresses\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "95c8f4dc-249c-4c00-b7e9-537e57a1bb04",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"Duis amet mollit in pariatur\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"addressHeight\": \"ex irure adipisicing\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"cupidatat\",\n   \"accountType\": 1,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"dolore anim qui\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"Duis nisi ex\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"ipsum\",\n   \"importanceHeight\": \"dolor oc\"\n  }\n },\n {\n  \"id\": \"elit ut enim dolor\",\n  \"account\": {\n   \"version\": 1,\n   \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"addressHeight\": \"proident irure\",\n   \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"publicKeyHeight\": \"nisi proident pariatur velit\",\n   \"accountType\": 1,\n   \"supplementalPublicKeys\": {\n    \"linked\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"node\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"vrf\": {\n     \"publicKey\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    \"voting\": {\n     \"publicKeys\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   },\n   \"activityBuckets\": [\n    {\n     \"startHeight\": \"dolor\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"startHeight\": \"Ut\",\n     \"totalFeesPaid\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"beneficiaryCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     \"rawScore\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"mosaics\": [\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    },\n    {\n     \"id\": \"0DC67FBE1CAD29E3\",\n     \"amount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    }\n   ],\n   \"importance\": \"quis aliqua in u\",\n   \"importanceHeight\": \"minim veniam est sed\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c6b6a955-6492-4a38-be01-b5b8e97a79b1",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4b4995c1-bfee-4d2b-a4a5-2318d67304ab",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "accounts"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6d3ef1b2-00fc-4347-ba9a-a74672bed175",
                    "name": "{account Id}",
                    "item": [
                        {
                            "id": "0ac17bbd-9592-4121-820e-01817eb1f990",
                            "name": "Get account information",
                            "request": {
                                "name": "Get account information",
                                "description": {
                                    "content": "Returns the account information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "919fe60a-3446-498a-a4b9-cd620e057ba8",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"anim elit id\",\n \"account\": {\n  \"version\": 1,\n  \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"addressHeight\": \"consectetur\",\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"publicKeyHeight\": \"in labore dolore Duis\",\n  \"accountType\": 1,\n  \"supplementalPublicKeys\": {\n   \"linked\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"node\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"vrf\": {\n    \"publicKey\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   \"voting\": {\n    \"publicKeys\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  \"activityBuckets\": [\n   {\n    \"startHeight\": \"est dolor Lorem proident\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"startHeight\": \"consectetur\",\n    \"totalFeesPaid\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"beneficiaryCount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"rawScore\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"mosaics\": [\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"amount\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"importance\": \"mollit cillum\",\n  \"importanceHeight\": \"aliqua aliquip commo\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "530d3568-d26d-419b-a33a-e338c9c522d7",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "22c0fd5f-141a-40f9-b066-3213efa7743d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "04dc2788-b755-429a-b271-c296d9c10e21",
                            "name": "Get account merkle information",
                            "request": {
                                "name": "Get account merkle information",
                                "description": {
                                    "content": "Returns the account merkle information.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "accounts",
                                        ":accountId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Account public key or address encoded using a 32-character set.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "accountId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "7d8f9612-35ce-429a-95f9-3412a6e03b06",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"est labore\",\n   \"encodedPath\": \"magna sed ea\",\n   \"nibbleCount\": -34923746,\n   \"linkMask\": \"in ad\",\n   \"links\": [\n    {\n     \"bit\": \"labore occaecat laboris minim\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"est sint Duis\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"ut dolore\",\n   \"encodedPath\": \"eiusmod labore ullamco ut consectetur\",\n   \"nibbleCount\": -82588648,\n   \"linkMask\": \"dolor quis minim\",\n   \"links\": [\n    {\n     \"bit\": \"esse Excepteur Lorem\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"culpa sit non anim qui\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bc5e1b04-9eb6-4971-a929-fe9e81f38c85",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8d5907a7-ad0e-4aaf-a853-03738fa42938",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "accounts",
                                                ":accountId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "accountId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "3bcc678b-1a2b-405b-a088-220433cb3e5c",
            "name": "blocks",
            "item": [
                {
                    "id": "cef1cf95-3d25-442c-b4bb-f0d9c21b114f",
                    "name": "Search blocks",
                    "request": {
                        "name": "Search blocks",
                        "description": {
                            "content": "Gets an array of bocks.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "blocks"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by public key of the account signing the entity.",
                                    "key": "signerPublicKey",
                                    "value": "sit reprehenderit cupidatat ea"
                                },
                                {
                                    "description": "Filter by beneficiary address.",
                                    "key": "beneficiaryAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                },
                                {
                                    "description": "Sort responses by the property set.\n",
                                    "key": "orderBy",
                                    "value": "<string>"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "35add759-4ec4-4bdd-98f1-fd2f754f8dc0",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"non labore qui\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 64210476,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -94623318,\n    \"height\": \"Duis \",\n    \"timestamp\": \"sed irure dolore Excepteur\",\n    \"difficulty\": \"deserunt occaecat Ut cupidatat\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"feeMultiplier\": 0\n   }\n  },\n  {\n   \"id\": \"deserunt eiusmod Excepteur\",\n   \"meta\": {\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"totalFee\": \"123456\",\n    \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHashSubCacheMerkleRoots\": [\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n     \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    ],\n    \"totalTransactionsCount\": 1,\n    \"transactionsCount\": 1,\n    \"statementsCount\": 1\n   },\n   \"block\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 17250970,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 2736841,\n    \"height\": \"aliqua qui sed\",\n    \"timestamp\": \"pariatur deserunt\",\n    \"difficulty\": \"irure laborum et est\",\n    \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n    \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n    \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n    \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"beneficiaryAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"feeMultiplier\": 0\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -8339019,\n  \"pageSize\": -68735463\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ae33c85a-bd98-49c0-b36f-a18db27b9730",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "signerPublicKey",
                                            "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                        },
                                        {
                                            "key": "beneficiaryAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e6a8e680-3e93-4d08-975c-8b9ab00469a3",
                    "name": "{height}",
                    "item": [
                        {
                            "id": "548b65b7-7cf3-4d12-a320-310d4d76961d",
                            "name": "Get block information",
                            "request": {
                                "name": "Get block information",
                                "description": {
                                    "content": "Gets a block from the chain that has the given height.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "dolore sit",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "c0311a0c-c739-4bee-bb3b-484aba5e393b",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"Ut Duis dolore\",\n \"meta\": {\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"totalFee\": \"123456\",\n  \"generationHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHashSubCacheMerkleRoots\": [\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  ],\n  \"totalTransactionsCount\": 1,\n  \"transactionsCount\": 1,\n  \"statementsCount\": 1\n },\n \"block\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": 45861648,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": -97434258,\n  \"height\": \"fugiat incididunt laboris in\",\n  \"timestamp\": \"pariatur nulla\",\n  \"difficulty\": \"adipisicing est\",\n  \"proofGamma\": \"8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E\",\n  \"proofVerificationHash\": \"82FB583BFE3EE78805784D078F2547AE\",\n  \"proofScalar\": \"480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C\",\n  \"previousBlockHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"transactionsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"receiptsHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"stateHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"beneficiaryAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"feeMultiplier\": 0\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1ec34d40-3b0b-42d9-a975-8ad3f0df9df5",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3e909709-5137-4362-b63c-7fa112e8a28b",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6e762965-eb57-4367-a34f-d32cd59da80c",
                            "name": "Get the merkle path for a given a transaction and block",
                            "request": {
                                "name": "Get the merkle path for a given a transaction and block",
                                "description": {
                                    "content": "Returns the merkle path for a transaction included in a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.transactionsHash) to verify if the transaction was included in the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "transactions",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "dolore sit",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Transaction hash.",
                                            "type": "any",
                                            "value": "laboris adipisicing commodo aliqua",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "1220a784-32f1-4827-88e0-ed63e857f598",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"left\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e87c16bf-6bff-4d21-b0ae-5d0a8ea08ee0",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "eb1ddd3f-6dfc-4219-9160-b36daca2704a",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "transactions",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b33906fe-01d3-468d-a4bf-17c030bcf279",
                            "name": "Get the merkle path for a given a receipt statement hash and block",
                            "request": {
                                "name": "Get the merkle path for a given a receipt statement hash and block",
                                "description": {
                                    "content": "Returns the merkle path for a receipt statement or resolution linked to a block.\nThe merkle path is the minimum number of nodes needed to calculate the merkle root.\n\nSteps to calculate the merkle root:\n1. proofHash = hash (leaf).\n2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:\n* a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).\n* b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).\n3. Repeat 2. for every item in the merklePath list.\n4. Compare if the calculated proofHash equals the one recorded in the\nblock header (block.receiptsHash) to verify if the statement was linked with the block.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "blocks",
                                        ":height",
                                        "statements",
                                        ":hash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Block height.",
                                            "type": "any",
                                            "value": "dolore sit",
                                            "key": "height"
                                        },
                                        {
                                            "description": "(Required) Receipt hash.",
                                            "type": "any",
                                            "value": "laboris adipisicing commodo aliqua",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "1e68109d-12b7-4763-b2bd-512ab7ab0fb5",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"merklePath\": [\n  {\n   \"position\": \"left\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"position\": \"right\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ffac7d80-1c29-428f-93a1-f4c2daddb0af",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6678fcde-161d-40f7-a101-39bf2419494b",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "blocks",
                                                ":height",
                                                "statements",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "height"
                                                },
                                                {
                                                    "type": "any",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "68ea1ff1-cdac-4f7c-9b80-dcf6d0a543ee",
            "name": "Get the current information of the chain",
            "request": {
                "name": "Get the current information of the chain",
                "description": {
                    "content": "Returns the current information of the blockchain.\n\nThe higher the score, the better the chain.\nDuring synchronization, nodes try to get the best blockchain in the network.\n\nThe score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:\n\n    block score = difficulty − time elapsed since last block\n",
                    "type": "text/plain"
                },
                "url": {
                    "path": [
                        "chain",
                        "info"
                    ],
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                },
                "method": "GET",
                "auth": null
            },
            "response": [
                {
                    "id": "d4e24c7c-d896-4491-9e5d-ed0f5a7bb5dc",
                    "name": "success",
                    "originalRequest": {
                        "url": {
                            "path": [
                                "chain",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                        {
                            "key": "Content-Type",
                            "value": "application/json"
                        }
                    ],
                    "body": "{\n \"height\": \"esse deserunt\",\n \"scoreHigh\": \"Ut voluptate velit\",\n \"scoreLow\": \"occaecat fugiat\",\n \"latestFinalizedBlock\": {\n  \"finalizationEpoch\": 123456,\n  \"finalizationPoint\": 0,\n  \"height\": \"aliquip nisi eiusmod\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                    "cookie": [],
                    "_postman_previewlanguage": "json"
                }
            ],
            "event": []
        },
        {
            "id": "e2065ad6-cf9c-4431-a9e6-5d13f437340a",
            "name": "finalization/proof",
            "item": [
                {
                    "id": "cb30c247-e7e1-4f5d-aab6-aa456888e7ad",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof for the greatest height associated with the given epoch.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "epoch",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Finalization epoch.",
                                    "type": "any",
                                    "value": "84390525",
                                    "key": "epoch"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "30e0fd19-3d4d-4a21-88c1-4761fb34e2c8",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": 26028591,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"elit consequat fugiat\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"in ex sit\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"ullamco dolor cillum\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "40ac4aad-fe7e-41cc-b1f1-3ae968b3f0a6",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2776d2a6-d354-4741-91f5-e96456a002d3",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "epoch",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "epoch"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f55d8f66-047b-499a-b2cf-5a1119b12720",
                    "name": "Get finalization proof",
                    "request": {
                        "name": "Get finalization proof",
                        "description": {
                            "content": "Gets finalization proof at the given height.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "finalization",
                                "proof",
                                "height",
                                ":height"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Block height.",
                                    "type": "any",
                                    "value": "dolore sit",
                                    "key": "height"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "0fc88c47-dae7-403c-a13d-e4af6e59ea55",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": 71109419,\n \"finalizationEpoch\": 123456,\n \"finalizationPoint\": 0,\n \"height\": \"ut\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"messageGroups\": [\n  {\n   \"stage\": 0,\n   \"height\": \"ad ipsum ut\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  },\n  {\n   \"stage\": 0,\n   \"height\": \"mollit eu Ut commodo\",\n   \"hashes\": [\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   ],\n   \"signatures\": [\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    },\n    {\n     \"root\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     \"bottom\": {\n      \"parentPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n      \"signature\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    }\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "80f5345f-7d7d-44ab-88ee-0a91a99ada80",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4491815a-16a9-4e0b-bcaf-316d6272db1d",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "finalization",
                                        "proof",
                                        "height",
                                        ":height"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "height"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "5ce3e7a4-375f-4ce4-9f82-c9b563aa5a4c",
            "name": "network",
            "item": [
                {
                    "id": "0fc29589-6eda-4c94-8cc7-9127907955e1",
                    "name": "Get the current network type of the chain",
                    "request": {
                        "name": "Get the current network type of the chain",
                        "description": {
                            "content": "Returns the current network type.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "658877ce-47f1-405e-bcdb-9a8e89532614",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"name\": \"mijinTest\",\n \"description\": \"catapult development network\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "45febc41-7d20-4d18-b640-075934668221",
                    "name": "fees",
                    "item": [
                        {
                            "id": "5b26120a-0b47-4fc1-9982-5da28d5b31dd",
                            "name": "Get rental fees information",
                            "request": {
                                "name": "Get rental fees information",
                                "description": {
                                    "content": "Returns the estimated effective rental fees for namespaces and mosaics.\nThis endpoint is only available if the REST instance has access to catapult-server ``resources/config-network.properties`` file.\nTo activate this feature, add the setting \"network.propertiesFilePath\" in the configuration file (rest/resources/rest.json).\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "rental"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "71f803b8-abfe-4d0e-88f4-865ea6abb750",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"effectiveRootNamespaceRentalFeePerBlock\": \"123456\",\n \"effectiveChildNamespaceRentalFee\": \"123456\",\n \"effectiveMosaicRentalFee\": \"123456\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "70fff80e-9b0a-4155-ba1c-3c04c057af28",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "rental"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f998f831-cb1a-463f-a521-d7b448593079",
                            "name": "Get transaction fees information",
                            "request": {
                                "name": "Get transaction fees information",
                                "description": {
                                    "content": "Returns the average, median, highest and lower fee multiplier over the last \"numBlocksTransactionFeeStats\".\nThe setting \"numBlocksTransactionFeeStats\" is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "network",
                                        "fees",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "960f89db-5bb4-42da-9520-b3262c4b9fee",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "network",
                                                "fees",
                                                "transaction"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"averageFeeMultiplier\": 0,\n \"medianFeeMultiplier\": 0,\n \"highestFeeMultiplier\": 0,\n \"lowestFeeMultiplier\": 0,\n \"minFeeMultiplier\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "948902bd-3f2e-482e-9baa-5e3058500f4c",
                    "name": "Get the network properties",
                    "request": {
                        "name": "Get the network properties",
                        "description": {
                            "content": "Returns the content from a catapult-server network configuration file (resources/config-network.properties).\nTo enable this feature, the REST setting \"network.propertiesFilePath\" must define where the file is located.\nThis is adjustable via the configuration file (rest/resources/rest.json) per REST instance.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "network",
                                "properties"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "d33afeee-49f2-4958-afe8-413e7b25407a",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"network\": {\n  \"identifier\": \"mijin-test\",\n  \"nodeEqualityStrategy\": \"public-key\",\n  \"nemesisSignerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"generationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"epochAdjustment\": \"1573430400s\"\n },\n \"chain\": {\n  \"enableVerifiableState\": true,\n  \"enableVerifiableReceipts\": true,\n  \"currencyMosaicId\": \"0x24F4'26B8'D549'3D4B\",\n  \"harvestingMosaicId\": \"0x1D9C'DC7E'218C'A88D\",\n  \"blockGenerationTargetTime\": \"30s\",\n  \"blockTimeSmoothingFactor\": \"3000\",\n  \"blockFinalizationInterval\": \"deserunt\",\n  \"importanceGrouping\": \"39\",\n  \"importanceActivityPercentage\": \"5\",\n  \"maxRollbackBlocks\": \"40\",\n  \"maxDifficultyBlocks\": \"60\",\n  \"defaultDynamicFeeMultiplier\": \"10'000\",\n  \"maxTransactionLifetime\": \"24h\",\n  \"maxBlockFutureTime\": \"500ms\",\n  \"initialCurrencyAtomicUnits\": \"8'998'999'998'000'000\",\n  \"maxMosaicAtomicUnits\": \"9'000'000'000'000'000\",\n  \"totalChainImportance\": \"15'000'000\",\n  \"minHarvesterBalance\": \"500\",\n  \"maxHarvesterBalance\": \"4'000'000\",\n  \"minVoterBalance\": \"50'000\",\n  \"maxVotingKeysPerAccount\": \"3\",\n  \"minVotingKeyLifetime\": \"72\",\n  \"maxVotingKeyLifetime\": \"26280\",\n  \"harvestBeneficiaryPercentage\": \"10\",\n  \"harvestNetworkPercentage\": \"5\",\n  \"harvestNetworkFeeSinkAddress\": \"SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ\",\n  \"blockPruneInterval\": \"360\",\n  \"maxTransactionsPerBlock\": \"200'000\"\n },\n \"plugins\": {\n  \"accountlink\": {\n   \"dummy\": \"in aute\"\n  },\n  \"aggregate\": {\n   \"maxTransactionsPerAggregate\": \"1'000\",\n   \"maxCosignaturesPerAggregate\": \"15\",\n   \"enableStrictCosignatureCheck\": false,\n   \"enableBondedAggregateSupport\": true,\n   \"maxBondedTransactionLifetime\": \"48h\"\n  },\n  \"lockhash\": {\n   \"lockedFundsPerAggregate\": \"10'000'000\",\n   \"maxHashLockDuration\": \"2d\"\n  },\n  \"locksecret\": {\n   \"maxSecretLockDuration\": \"30d\",\n   \"minProofSize\": \"1\",\n   \"maxProofSize\": \"1000\"\n  },\n  \"metadata\": {\n   \"maxValueSize\": \"1024\"\n  },\n  \"mosaic\": {\n   \"maxMosaicsPerAccount\": \"10'000\",\n   \"maxMosaicDuration\": \"3650d\",\n   \"maxMosaicDivisibility\": \"6\",\n   \"mosaicRentalFeeSinkAddress\": \"SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ\",\n   \"mosaicRentalFee\": \"500\"\n  },\n  \"multisig\": {\n   \"maxMultisigDepth\": \"3\",\n   \"maxCosignatoriesPerAccount\": \"10\",\n   \"maxCosignedAccountsPerAccount\": \"5\"\n  },\n  \"namespace\": {\n   \"maxNameSize\": \"64\",\n   \"maxChildNamespaces\": \"500\",\n   \"maxNamespaceDepth\": \"3\",\n   \"minNamespaceDuration\": \"1m\",\n   \"maxNamespaceDuration\": \"365d\",\n   \"namespaceGracePeriodDuration\": \"2m\",\n   \"reservedRootNamespaceNames\": \"xem, nem, user, account, org, com, biz, net, edu, mil, gov, info\",\n   \"namespaceRentalFeeSinkAddress\": \"SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ\",\n   \"rootNamespaceRentalFeePerBlock\": \"1\",\n   \"childNamespaceRentalFee\": \"100\"\n  },\n  \"restrictionaccount\": {\n   \"maxAccountRestrictionValues\": \"512\"\n  },\n  \"restrictionmosaic\": {\n   \"maxMosaicRestrictionValues\": \"20\"\n  },\n  \"transfer\": {\n   \"maxMessageSize\": \"1024\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4bc091d8-efe4-4856-be0c-9f86781d9db1",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "network",
                                        "properties"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "9e87dca1-b57c-4ab4-a408-fb65e5ede05f",
            "name": "node",
            "item": [
                {
                    "id": "c1a290ff-1ce2-4c74-85a2-af488f6b0ba9",
                    "name": "Get the node health information",
                    "request": {
                        "name": "Get the node health information",
                        "description": {
                            "content": "Supplies information regarding the connection and services status.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "health"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "db862314-5886-4615-a6c7-e0636d7d4f85",
                            "name": "Both API node and database services are reachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"down\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6c33f145-8c30-4fa6-b9d3-6baf6f218dc7",
                            "name": "Either API node or database service is unavailable or unreachable from REST server.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"status\": {\n  \"apiNode\": \"down\",\n  \"db\": \"down\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "79887f65-c25b-4795-a66b-7a5f7604f0ce",
                    "name": "Get the node information",
                    "request": {
                        "name": "Get the node information",
                        "description": {
                            "content": "Supplies additional information about the application running on a node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "info"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "d099ca65-a832-425e-a565-b7d38192399e",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "info"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"version\": 0,\n \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"roles\": 7,\n \"port\": 7900,\n \"networkIdentifier\": 144,\n \"friendlyName\": \"api-node-0\",\n \"host\": \"127.0.0.1\",\n \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8ae71df5-5442-46a5-8e6e-88ebf2ccd3ff",
                    "name": "Get peers information",
                    "request": {
                        "name": "Get peers information",
                        "description": {
                            "content": "Gets the list of peers visible by the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "peers"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "5beeb3e7-6d7e-44b4-a67d-a28bfc0cf978",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "peers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n },\n {\n  \"version\": 0,\n  \"publicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"networkGenerationHashSeed\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"roles\": 7,\n  \"port\": 7900,\n  \"networkIdentifier\": 144,\n  \"friendlyName\": \"api-node-0\",\n  \"host\": \"127.0.0.1\",\n  \"nodePublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c547b52e-71b7-4f78-8be0-7f6c66b00b85",
                    "name": "Get the storage information of the node",
                    "request": {
                        "name": "Get the storage information of the node",
                        "description": {
                            "content": "Returns storage information about the node.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "storage"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "928785fb-9bad-47cf-8415-072ef31a3be7",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "storage"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"numBlocks\": 245053,\n \"numTransactions\": 58590,\n \"numAccounts\": 177\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "5be8c0f8-e4b3-4ee2-9b9a-aec173b482c7",
                    "name": "Get the node time",
                    "request": {
                        "name": "Get the node time",
                        "description": {
                            "content": "Gets the node time at the moment the reply was sent and received.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "time"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "7fc11e00-314f-4ffc-b752-295334a7726e",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "time"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"communicationTimestamps\": {\n  \"sendTimestamp\": \"occaecat aliqua in\",\n  \"receiveTimestamp\": \"sunt consectetur\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0d4141ac-281c-42cb-8eaf-ec7f7b7117b2",
                    "name": "Get the version of the running REST component",
                    "request": {
                        "name": "Get the version of the running REST component",
                        "description": {
                            "content": "Returns the version of the running catapult-rest component.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "server"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "40101644-a86a-4641-8105-f6806a157eb0",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "server"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"serverInfo\": {\n  \"restVersion\": \"1.0.14\",\n  \"sdkVersion\": \"0.7.14\",\n  \"deployment\": {\n   \"deploymentTool\": \"symbol-bootstrap\",\n   \"deploymentToolVersion\": \"1.0.6\",\n   \"lastUpdatedDate\": \"2021-06-02\"\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1f54d452-8c7f-4f3f-ac82-798bcb0da47f",
                    "name": "Get the unlocked harvesting account public keys.",
                    "request": {
                        "name": "Get the unlocked harvesting account public keys.",
                        "description": {
                            "content": "Returns array of unlocked account public keys.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "node",
                                "unlockedaccount"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "5d4461b7-12b5-459f-afac-733929465c4d",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "node",
                                        "unlockedaccount"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"unlockedAccount\": [\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\"\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "9f64e4ad-7e5c-48a0-a903-30c29fa91676",
            "name": "transactions",
            "item": [
                {
                    "id": "f48b70a1-0679-4027-9a92-437bcc5a753c",
                    "name": "Announce a new transaction",
                    "request": {
                        "name": "Announce a new transaction",
                        "description": {
                            "content": "Announces a transaction to the network.\nThe [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities.\nCatbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html). \nIt's recommended to use SDKs instead of calling the API endpoint directly to announce transactions.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"payload\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "e59bed7b-0800-4d94-ae20-4726a7655163",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"anim aute cillum Duis\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f1692461-3fbb-4b50-9ccf-697ca144e509",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "51111032-eac5-4f52-82e7-5a89aa43999e",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e99508f7-ffe0-4db1-838c-6713ccd16fc8",
                    "name": "confirmed",
                    "item": [
                        {
                            "id": "068d0875-cc98-4eac-b5e4-b2d0337e283d",
                            "name": "Search confirmed transactions",
                            "request": {
                                "name": "Search confirmed transactions",
                                "description": {
                                    "content": "Returns an array of confirmed transactions.\nIf a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that\nwas resolved from the alias at confirmation time.\n",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "sit reprehenderit cupidatat ea"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "bb020dde-3489-4efc-a629-1cc3a5ead8d2",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"elit officia\",\n   \"meta\": {\n    \"height\": \"occaecat irur\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -21178081,\n    \"timestamp\": \"aliqua consequat sed mollit consectetur\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 7333515,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -93544598,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"exercitation nostrud culpa do\",\n   \"meta\": {\n    \"height\": \"est proident comm\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -49858139,\n    \"timestamp\": \"Duis sit cillum\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 59585246,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -35107529,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -5628011,\n  \"pageSize\": -55226337\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "38ed17fb-9aba-4225-b90a-7b98cd9fb449",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1130591c-129f-4dba-b764-5186e9afe677",
                            "name": "Get confirmed trasactions information",
                            "request": {
                                "name": "Get confirmed trasactions information",
                                "description": {
                                    "content": "Returns confirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "136b2884-77a7-4f34-8ad0-e9bc9628e74f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"amet eiusmod laboris\",\n  \"meta\": {\n   \"height\": \"irure non\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 45772930,\n   \"timestamp\": \"consectetur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -19143310,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 89475817,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"ea sint\",\n  \"meta\": {\n   \"height\": \"adipisicing ex\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 54883864,\n   \"timestamp\": \"aliq\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 7343514,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 18143242,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f03e80f1-25f1-4057-975d-808c2453f4e7",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "aae8e631-1bbd-4e82-a287-c0dcd508fc0b",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "366394f2-22e8-4021-b5c3-a756f080bb43",
                            "name": "Get confirmed transaction information",
                            "request": {
                                "name": "Get confirmed transaction information",
                                "description": {
                                    "content": "Returns confirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "confirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "d7178f95-8b54-4d5c-add2-fd65e01e7743",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"in\",\n \"meta\": {\n  \"height\": \"mollit dolor est ipsum aliquip\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 84030661,\n  \"timestamp\": \"in laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35922893,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 3455103,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3ba23bae-3bcc-42bc-b730-6fd2f67a1bc4",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ac273917-6ed3-484f-83d3-107b04258225",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "confirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d92884a0-a48f-4876-85f9-7e8ef6e1d920",
                    "name": "unconfirmed",
                    "item": [
                        {
                            "id": "fb128e3d-0a3d-462b-b894-d5f7ab91b9cb",
                            "name": "Search unconfirmed transactions",
                            "request": {
                                "name": "Search unconfirmed transactions",
                                "description": {
                                    "content": "Returns an array of unconfirmed transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "sit reprehenderit cupidatat ea"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "57f7f96d-8f89-4f44-988e-2b0b7d3b682b",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"offici\",\n   \"meta\": {\n    \"height\": \"Excepteur\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -99442078,\n    \"timestamp\": \"eu laborum dolore nostrud eiusmod\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": -83468568,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -24111591,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"anim ut eiusmod in\",\n   \"meta\": {\n    \"height\": \"ad commodo eiusmod\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -53927400,\n    \"timestamp\": \"in minim officia\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 31387004,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 94443419,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 7768854,\n  \"pageSize\": -57942413\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "26c19e82-17b3-4662-8713-0408503b4eba",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b04faa86-5e9c-43c4-bdaa-e2cff53c73e8",
                            "name": "Get unconfirmed trasactions information",
                            "request": {
                                "name": "Get unconfirmed trasactions information",
                                "description": {
                                    "content": "Returns unconfirmed transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "4127b2f4-15cd-410d-99d2-a80dd0156f65",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"amet eiusmod laboris\",\n  \"meta\": {\n   \"height\": \"irure non\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 45772930,\n   \"timestamp\": \"consectetur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -19143310,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 89475817,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"ea sint\",\n  \"meta\": {\n   \"height\": \"adipisicing ex\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 54883864,\n   \"timestamp\": \"aliq\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 7343514,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 18143242,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d7b5778f-b2e1-49f8-94c4-958fb5dd8694",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0ac0cbe2-d848-4383-81e7-983368c386da",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8a3c6328-264f-4494-bf86-7d1d8330bc54",
                            "name": "Get unconfirmed transaction information",
                            "request": {
                                "name": "Get unconfirmed transaction information",
                                "description": {
                                    "content": "Returns unconfirmed transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "unconfirmed",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "86aeb547-f567-4b19-8c87-d9001df3e99c",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"in\",\n \"meta\": {\n  \"height\": \"mollit dolor est ipsum aliquip\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 84030661,\n  \"timestamp\": \"in laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35922893,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 3455103,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9dd7ba9e-326f-4971-b15b-76637982bd58",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1642d417-27ee-46e3-9774-4c5d18c1455d",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "unconfirmed",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "dfc8445e-fba1-424c-b1fe-d812d863f10f",
                    "name": "partial",
                    "item": [
                        {
                            "id": "7b4aa7f4-180d-4f79-9043-3d92bee21c2d",
                            "name": "Search partial transactions",
                            "request": {
                                "name": "Search partial transactions",
                                "description": {
                                    "content": "Returns an array of partial transactions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by address of the account receiving the transaction.",
                                            "key": "recipientAddress",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by public key of the account signing the entity.",
                                            "key": "signerPublicKey",
                                            "value": "sit reprehenderit cupidatat ea"
                                        },
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height greater or equal than this one are returned.",
                                            "key": "fromHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Only blocks with height smaller or equal than this one are returned.",
                                            "key": "toHeight",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.\n",
                                            "key": "fromTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Requires providing the `transferMosaicId` filter.\nOnly transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.\n",
                                            "key": "toTransferAmount",
                                            "value": "labore consequat laboris fugiat"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by transaction type.\nTo filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.\n",
                                            "key": "type",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "When true, the endpoint also returns all the embedded aggregate transactions.\nOtherwise, only top-level transactions used to calculate the block transactionsHash are returned.\n**Note:** This field does not work when combined with the ``address`` parameter. This is,\nembedded transactions containing the address specified through the ``address`` parameter\nwill not be returned even when used with ``embedded=true``. There is no problem when using\nother parameters like ``recipientAddress`` instead.\n",
                                            "key": "embedded",
                                            "value": "false"
                                        },
                                        {
                                            "description": "Filters transactions involving a specific ``mosaicId``.",
                                            "key": "transferMosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "81e9bb15-99bf-479e-a599-f1b953ae8d22",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"offici\",\n   \"meta\": {\n    \"height\": \"Excepteur\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -99442078,\n    \"timestamp\": \"eu laborum dolore nostrud eiusmod\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": -83468568,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": -24111591,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  },\n  {\n   \"id\": \"anim ut eiusmod in\",\n   \"meta\": {\n    \"height\": \"ad commodo eiusmod\",\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"index\": -53927400,\n    \"timestamp\": \"in minim officia\",\n    \"feeMultiplier\": 0\n   },\n   \"transaction\": {\n    \"size\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"version\": 31387004,\n    \"network\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": 94443419,\n    \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n    \"linkAction\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 7768854,\n  \"pageSize\": -57942413\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3bdfac49-bc82-42a7-9554-2e9f2d042d68",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "recipientAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "signerPublicKey",
                                                    "value": "AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26"
                                                },
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "toHeight",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "fromTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "toTransferAmount",
                                                    "value": "123456"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "type",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "embedded",
                                                    "value": "false"
                                                },
                                                {
                                                    "key": "transferMosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "619b2284-cdbb-4b29-a3d7-3f8d2cbca30f",
                            "name": "Announce an aggregate bonded transaction",
                            "request": {
                                "name": "Announce an aggregate bonded transaction",
                                "description": {
                                    "content": "Announces an aggregate bonded transaction to the network.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"payload\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f3bdd9ba-4962-4753-9aee-6a7f4df5cdb8",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Accepted",
                                    "code": 202,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"message\": \"anim aute cillum Duis\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2e196267-3761-419f-8ab4-b24f25c19998",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fc2f9b95-7b62-4927-a5d1-0c5f02b6b151",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4eb4177f-da0c-4689-8bc2-32f2c8eec5b4",
                            "name": "Get partial trasactions information",
                            "request": {
                                "name": "Get partial trasactions information",
                                "description": {
                                    "content": "Returns partial transactions information for a given array of transactionIds.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "POST",
                                "auth": null,
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"transactionIds\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a315d6ff-fa8f-47dc-bad3-2fb0509e63db",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"amet eiusmod laboris\",\n  \"meta\": {\n   \"height\": \"irure non\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 45772930,\n   \"timestamp\": \"consectetur\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": -19143310,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 89475817,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"id\": \"ea sint\",\n  \"meta\": {\n   \"height\": \"adipisicing ex\",\n   \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n   \"index\": 54883864,\n   \"timestamp\": \"aliq\",\n   \"feeMultiplier\": 0\n  },\n  \"transaction\": {\n   \"size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signature\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"version\": 7343514,\n   \"network\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": 18143242,\n   \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n   \"linkAction\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2b752821-50c3-4b9d-8feb-21f1112824cf",
                                    "name": "InvalidContent",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Bad Request",
                                    "code": 400,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1b3a6061-21fb-4792-b0f5-51812b065fc5",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "POST",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a81bb2df-2f40-4d1e-a874-ea3dccbb2675",
                            "name": "Get partial transaction information",
                            "request": {
                                "name": "Get partial transaction information",
                                "description": {
                                    "content": "Returns partial transaction information given a transactionId or hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "transactions",
                                        "partial",
                                        ":transactionId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Transaction id or hash.",
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "transactionId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "8ff3c818-c8b4-4841-a4d8-5a10c1336b88",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"in\",\n \"meta\": {\n  \"height\": \"mollit dolor est ipsum aliquip\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"merkleComponentHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"index\": 84030661,\n  \"timestamp\": \"in laborum\",\n  \"feeMultiplier\": 0\n },\n \"transaction\": {\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signature\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signerPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"version\": -35922893,\n  \"network\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": 3455103,\n  \"linkedPublicKey\": \"AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26\",\n  \"linkAction\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d19b02d2-7863-4827-9bf3-c18bb14943d7",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f4f2113a-ff6a-4220-a7c7-6de99702a746",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "transactions",
                                                "partial",
                                                ":transactionId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "transactionId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d311c945-5e69-4259-b09b-6482a6987f61",
                    "name": "Announce a cosignature transaction",
                    "request": {
                        "name": "Announce a cosignature transaction",
                        "description": {
                            "content": "Announces a cosignature transaction to the network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactions",
                                "cosignature"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"parentHash\": \"eiusm\",\n    \"signature\": \"<string>\",\n    \"signerPublicKey\": \"amet velit\",\n    \"version\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "eb8f7c46-d7ee-4dff-bdb2-08770e327af4",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"message\": \"anim aute cillum Duis\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a842ec6a-4d21-463a-9411-49a28865af28",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a83752cd-91c4-411b-979f-88a21ef3d6b3",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactions",
                                        "cosignature"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "a35aad36-3b34-46f4-a658-d7964842b985",
            "name": "transaction Status",
            "item": [
                {
                    "id": "88a1af19-acf8-4d8e-8233-eca17d214524",
                    "name": "Get transaction statuses",
                    "request": {
                        "name": "Get transaction statuses",
                        "description": {
                            "content": "Returns an array of transaction statuses for a given array of transaction hashes.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"hashes\": [\n        \"v\",\n        \"minim\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "5beb3f21-bdf1-4ff4-8567-f8a96262d428",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"group\": \"failed\",\n  \"deadline\": \"elit amet aliquip\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_LockSecret_Proof_Size_Out_Of_Bounds\",\n  \"height\": \"cupidatat ut est nulla\"\n },\n {\n  \"group\": \"confirmed\",\n  \"deadline\": \"minim amet\",\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"code\": \"Failure_Multisig_Redundant_Modification\",\n  \"height\": \"Lorem deserunt amet\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0ae52568-4555-4909-93ae-f7f54e398b70",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "be4be7a9-0872-41dd-acc2-493b1361917f",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f735e207-2f26-45f5-93e0-f33316dc647d",
                    "name": "Get transaction status",
                    "request": {
                        "name": "Get transaction status",
                        "description": {
                            "content": "Returns the transaction status for a given hash.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "transactionStatus",
                                ":hash"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Transaction hash.",
                                    "type": "any",
                                    "value": "laboris adipisicing commodo aliqua",
                                    "key": "hash"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "cb51be71-31d1-4994-b8c4-6e45af4d9088",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"group\": \"unconfirmed\",\n \"deadline\": \"irure ea\",\n \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n \"code\": \"Failure_RestrictionMosaic_Max_Restrictions_Exceeded\",\n \"height\": \"officia id eu\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ae87a18c-da9f-4880-b80d-df7a429b9144",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "74ddaf3a-a77c-45d2-9a88-60c0a4baef25",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "transactionStatus",
                                        ":hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "hash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "c8b6db11-a596-43aa-b8ef-4edd2b8401df",
            "name": "lock",
            "item": [
                {
                    "id": "f85e162c-9e9e-4172-84fb-697e2187820a",
                    "name": "hash",
                    "item": [
                        {
                            "id": "43e03428-55fb-48ae-a7d7-e5d90c450db9",
                            "name": "Search hash lock entries",
                            "request": {
                                "name": "Search hash lock entries",
                                "description": {
                                    "content": "Returns an array of hash locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "hash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "bf9645a8-60df-4269-beb6-4794c04a3213",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"nisi mollit cillum consectetur labore\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"eiusmod reprehenderit quis\",\n    \"status\": 1,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"nulla dolor labore proident\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"in exercitation ali\",\n    \"status\": 0,\n    \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -49449486,\n  \"pageSize\": 31691077\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4f43aaa8-89e9-486e-994f-169489465c04",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ae16024f-2d7f-4f1d-94d6-44734647c913",
                            "name": "{hash}",
                            "item": [
                                {
                                    "id": "0198a681-560f-4364-95d8-0826369eadec",
                                    "name": "Get hash lock information",
                                    "request": {
                                        "name": "Get hash lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "ac19ccd9-a0ff-4536-8334-be55c818a9e8",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"labore ea\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"deserunt pariatur\",\n  \"status\": 0,\n  \"hash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "994c2b6c-89bb-43ed-9c2a-2ce521b9cbcd",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "5f13d46e-6aa0-4c36-acd1-f6aa1a6a2f35",
                                    "name": "Get hash lock merkle information",
                                    "request": {
                                        "name": "Get hash lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "hash",
                                                ":hash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "hash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "daf4d99a-f44c-486e-9d8d-a90f5e620db5",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "b82e5704-16b4-4aa5-a2e7-e12a638d13d8",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "hash",
                                                        ":hash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "hash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "27225771-e3b1-459c-9d48-6b876e2d479d",
                    "name": "secret",
                    "item": [
                        {
                            "id": "314c84a9-28f2-4c8d-b6cd-fd27f8360777",
                            "name": "Search secret lock entries",
                            "request": {
                                "name": "Search secret lock entries",
                                "description": {
                                    "content": "Returns an array of secret locks.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "lock",
                                        "secret"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Filter by secret.",
                                            "key": "secret",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "5ac2c431-bc03-4d69-8c27-36065fe50372",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"ullamco ut\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"veniam consequat magna eu\",\n    \"status\": 0,\n    \"hashAlgorithm\": 0,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  },\n  {\n   \"id\": \"in nostrud\",\n   \"lock\": {\n    \"version\": 1,\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"amount\": \"123456\",\n    \"endHeight\": \"aute officia tempor aliqua eiusmod\",\n    \"status\": 0,\n    \"hashAlgorithm\": 2,\n    \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n    \"recipientAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 91662610,\n  \"pageSize\": -20083461\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f2b4a069-a6d2-4349-8f2f-f9981d474fd5",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "secret",
                                                    "value": "FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "271921ac-28d0-4639-ae76-6e788f70c3f6",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "1d9e29b3-84f6-4677-8464-3c4ba83aa0a9",
                                    "name": "Get secret lock information",
                                    "request": {
                                        "name": "Get secret lock information",
                                        "description": {
                                            "content": "Gets the hash lock for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "4569c038-9210-44d4-8055-7770b281be89",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"labore\",\n \"lock\": {\n  \"version\": 1,\n  \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"amount\": \"123456\",\n  \"endHeight\": \"sed\",\n  \"status\": 1,\n  \"hashAlgorithm\": 2,\n  \"secret\": \"FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1\",\n  \"recipientAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "0bc3fea3-65bf-474a-84b2-bdcc3600eb55",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "faf52100-baec-4aa3-af5c-d426e32a0556",
                                    "name": "Get secret lock merkle information",
                                    "request": {
                                        "name": "Get secret lock merkle information",
                                        "description": {
                                            "content": "Gets the hash lock merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "lock",
                                                "secret",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "4ecbdfef-5976-44b2-9683-e9c1fdd55422",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "f97a21fb-706c-4cb8-8458-92c8cc552bd9",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "lock",
                                                        "secret",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "88dcd946-9dbb-4e72-98dc-f29068d29ed0",
            "name": "metadata",
            "item": [
                {
                    "id": "a33b8235-0105-4dc6-93ea-284a902749ff",
                    "name": "Search metadata entries",
                    "request": {
                        "name": "Search metadata entries",
                        "description": {
                            "content": "Returns an array of metadata.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "metadata"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by address sending the metadata entry.",
                                    "key": "sourceAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by metadata key.",
                                    "key": "scopedMetadataKey",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by namespace or mosaic id.",
                                    "key": "targetId",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by metadata type.",
                                    "key": "metadataType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9ea96369-c42d-4881-8f01-6763ed4c1db1",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"velit voluptate aliquip cupidatat reprehenderit\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"in quis cupidatat\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  },\n  {\n   \"id\": \"do esse quis veniam\",\n   \"metadataEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"sourceAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n    \"metadataType\": \"<integer>\",\n    \"value\": \"exercitation sunt culpa\",\n    \"targetId\": \"0DC67FBE1CAD29E3\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -49501353,\n  \"pageSize\": 90304745\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "80d5c56c-bdc9-419e-bcea-d2fb4b9f51b0",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "metadata"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "sourceAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "scopedMetadataKey",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "targetId",
                                            "value": "0DC67FBE1CAD29E3"
                                        },
                                        {
                                            "key": "metadataType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0b6235e5-05f4-4841-83b6-0c725017f72d",
                    "name": "{composite Hash}",
                    "item": [
                        {
                            "id": "6905c3de-7a83-49fc-a449-becef8abade2",
                            "name": "Get metadata information",
                            "request": {
                                "name": "Get metadata information",
                                "description": {
                                    "content": "Gets the metadata for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "laboris adipisicing commodo aliqua",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "b88f9276-19b5-49ba-8e07-194f6d2ccd98",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"anim Lorem\",\n \"metadataEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"sourceAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"scopedMetadataKey\": \"0DC67FBE1CAD29E3\",\n  \"metadataType\": \"<integer>\",\n  \"value\": \"ut et\",\n  \"targetId\": \"0DC67FBE1CAD29E3\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ed2d71a0-300f-410c-829a-546531d3ac9b",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a881f16a-8b36-47d8-93cc-9230039e5d2c",
                            "name": "Get metadata merkle information",
                            "request": {
                                "name": "Get metadata merkle information",
                                "description": {
                                    "content": "Gets the metadata merkle for a given composite hash.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "metadata",
                                        ":compositeHash",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Filter by composite hash.",
                                            "type": "any",
                                            "value": "laboris adipisicing commodo aliqua",
                                            "key": "compositeHash"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "1dad4edd-a39b-4fd7-a262-0acf7609ad96",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4b9b35f5-9d2c-425a-bba2-c83cc4c9bcb8",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "metadata",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "802ea0ac-5ce4-455f-b168-d203bbab3c20",
            "name": "mosaics",
            "item": [
                {
                    "id": "e7df7ce5-f235-43ed-af83-a137416aec7a",
                    "name": "Search mosaics",
                    "request": {
                        "name": "Search mosaics",
                        "description": {
                            "content": "Gets an array of mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "83309797-c032-4613-b1c9-688adb5bc28a",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"in nisi\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"in ut commodo\",\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"revision\": 2222212828,\n    \"flags\": 8376889,\n    \"divisibility\": 84599528,\n    \"duration\": \"exercitation elit est dolor\"\n   }\n  },\n  {\n   \"id\": \"esse proident sunt cupidatat\",\n   \"mosaic\": {\n    \"version\": 1,\n    \"id\": \"0DC67FBE1CAD29E3\",\n    \"supply\": \"123456\",\n    \"startHeight\": \"sit quis et\",\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"revision\": 2222212828,\n    \"flags\": 76015092,\n    \"divisibility\": -90209964,\n    \"duration\": \"irure ipsum in\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 51364481,\n  \"pageSize\": -70892008\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b9060793-ad1c-45fd-ba36-cc249fedcaf3",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c65c79fa-07d0-4c72-84e4-f550d1601e33",
                    "name": "Get mosaics information for an array of mosaics",
                    "request": {
                        "name": "Get mosaics information for an array of mosaics",
                        "description": {
                            "content": "Gets an array of mosaic definition.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "mosaics"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "c7ea5480-5cb3-4031-a124-72e4d6b3e9c5",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"aute adipisicing\",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"dolor\",\n   \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"revision\": 2222212828,\n   \"flags\": -32948819,\n   \"divisibility\": -83223150,\n   \"duration\": \"incididunt aute culpa ipsum\"\n  }\n },\n {\n  \"id\": \"dolor irure qui\",\n  \"mosaic\": {\n   \"version\": 1,\n   \"id\": \"0DC67FBE1CAD29E3\",\n   \"supply\": \"123456\",\n   \"startHeight\": \"minim enim veniam labore\",\n   \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"revision\": 2222212828,\n   \"flags\": -23415090,\n   \"divisibility\": -64550755,\n   \"duration\": \"Lorem laboris officia\"\n  }\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "86fea146-cdb1-4e15-bae8-d0e02642b7db",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "208b9dda-8709-4c5d-b155-7a531a3763c3",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "mosaics"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "32b92b86-c5cf-4044-bf2d-22a3e39ed290",
                    "name": "{mosaic Id}",
                    "item": [
                        {
                            "id": "28b62d97-d393-4fac-9bfc-270d3f6fb3ca",
                            "name": "Get mosaic information",
                            "request": {
                                "name": "Get mosaic information",
                                "description": {
                                    "content": "Gets the mosaic definition for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "a881a516-e824-43c2-bc4e-f231263c6339",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"laboris\",\n \"mosaic\": {\n  \"version\": 1,\n  \"id\": \"0DC67FBE1CAD29E3\",\n  \"supply\": \"123456\",\n  \"startHeight\": \"ipsum ut\",\n  \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"revision\": 2222212828,\n  \"flags\": 12818895,\n  \"divisibility\": 32742624,\n  \"duration\": \"cupidatat irure quis\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e1f209f4-655a-4cbd-a03b-c46648f197f4",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4e65112b-bb33-46be-9882-b4bbe55e3aa1",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6a2f804a-7bfd-496c-a4d0-18b41a5040ad",
                            "name": "Get mosaic merkle information",
                            "request": {
                                "name": "Get mosaic merkle information",
                                "description": {
                                    "content": "Gets the mosaic definition merkle for a given mosaic identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "mosaics",
                                        ":mosaicId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Mosaic identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "mosaicId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "6bc295de-663f-46ab-83f1-8ce4406884c1",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f47c1fd2-ea8e-409e-872a-f50f74e7d516",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "dded240f-c8c1-4ce6-9c44-67e4e6928cfa",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "mosaics",
                                                ":mosaicId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "mosaicId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "91ea88bd-a6b2-4400-bb5e-ce165e957adb",
            "name": "account/{address}/multisig",
            "item": [
                {
                    "id": "925fc39e-0a1a-4654-b1dd-7115c0dbdb54",
                    "name": "Get multisig account information",
                    "request": {
                        "name": "Get multisig account information",
                        "description": {
                            "content": "Returns the multisig account information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "24589e86-071a-4110-870d-654055f2b170",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"multisig\": {\n  \"version\": 1,\n  \"accountAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"minApproval\": 2222212828,\n  \"minRemoval\": 2222212828,\n  \"cosignatoryAddresses\": [\n   \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n  ],\n  \"multisigAddresses\": [\n   \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n  ]\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d3ae7da7-9fec-46e0-8119-3e146495ba01",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "49420bd2-2431-4b9e-b31d-698a79d7a075",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4b6fe7df-2480-473c-bb10-9da465fdc15a",
                    "name": "Get multisig account merkle information",
                    "request": {
                        "name": "Get multisig account merkle information",
                        "description": {
                            "content": "Returns the multisig account merkle information.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "merkle"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9b2fb2cf-13b3-4039-b8d6-7c78f54625ed",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "1c18c33b-3e5c-4efb-b3bc-a0a3bf0909e9",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "66fb7a87-3825-4451-8960-3896d9dcecf7",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2e67808a-8a66-48ab-a4d0-4d000471fcbc",
                    "name": "Get multisig account graph information",
                    "request": {
                        "name": "Get multisig account graph information",
                        "description": {
                            "content": "Returns the multisig account graph.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "account",
                                ":address",
                                "multisig",
                                "graph"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "(Required) Account address.",
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "address"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "1e774f4c-4533-4c70-a643-5bd4f48061f8",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ],\n     \"multisigAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ],\n     \"multisigAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ]\n    }\n   }\n  ]\n },\n {\n  \"level\": 0,\n  \"multisigEntries\": [\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ],\n     \"multisigAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ]\n    }\n   },\n   {\n    \"multisig\": {\n     \"version\": 1,\n     \"accountAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n     \"minApproval\": 2222212828,\n     \"minRemoval\": 2222212828,\n     \"cosignatoryAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ],\n     \"multisigAddresses\": [\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n      \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n     ]\n    }\n   }\n  ]\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3bbd8d2d-1190-4a1e-9363-c5feca14df17",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "717ba2aa-4e8b-4576-ac02-6aa83673a813",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "account",
                                        ":address",
                                        "multisig",
                                        "graph"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "type": "any",
                                            "key": "address"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "fb61ba04-93ac-4af0-88ac-d5f9b3426d2d",
            "name": "namespaces",
            "item": [
                {
                    "id": "0a060235-dfdd-4bab-895a-0637a23a94ed",
                    "name": "Search namespaces",
                    "request": {
                        "name": "Search namespaces",
                        "description": {
                            "content": "Gets an array of namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by owner address.",
                                    "key": "ownerAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by registration type.",
                                    "key": "registrationType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by root namespace.",
                                    "key": "level0",
                                    "value": "<hex>"
                                },
                                {
                                    "description": "Filter by alias type.",
                                    "key": "aliasType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "e5af33af-3022-40e7-bd2f-81f896ea2585",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"aliqua laborum elit\",\n   \"meta\": {\n    \"active\": false,\n    \"index\": 79674702\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"startHeight\": \"dolor consequat\",\n    \"endHeight\": \"consectetur anim Lore\",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  },\n  {\n   \"id\": \"elit voluptate Lorem culpa\",\n   \"meta\": {\n    \"active\": false,\n    \"index\": 32449318\n   },\n   \"namespace\": {\n    \"version\": 1,\n    \"registrationType\": 0,\n    \"depth\": 1,\n    \"level0\": \"85BBEA6CC462B244\",\n    \"alias\": {\n     \"type\": 0,\n     \"mosaicId\": \"0DC67FBE1CAD29E3\",\n     \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n    },\n    \"parentId\": \"85BBEA6CC462B244\",\n    \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"startHeight\": \"sit reprehenderit\",\n    \"endHeight\": \"quis incididunt minim laborum\",\n    \"level1\": \"85BBEA6CC462B244\",\n    \"level2\": \"85BBEA6CC462B244\"\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 27104491,\n  \"pageSize\": 20054356\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4f3a9e6d-9657-4bc3-99c6-e2f3532bc0dc",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "ownerAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "registrationType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "level0",
                                            "value": "85BBEA6CC462B244"
                                        },
                                        {
                                            "key": "aliasType",
                                            "value": "0"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "230acdab-c05b-4528-a717-da0d1f51016a",
                    "name": "{namespace Id}",
                    "item": [
                        {
                            "id": "03636357-7282-4e33-b900-8bc358db8dae",
                            "name": "Get namespace information",
                            "request": {
                                "name": "Get namespace information",
                                "description": {
                                    "content": "Gets the namespace for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "531d89bc-655b-412f-9fae-7e35968adc7c",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"esse proident tempor ea\",\n \"meta\": {\n  \"active\": false,\n  \"index\": 46865285\n },\n \"namespace\": {\n  \"version\": 1,\n  \"registrationType\": 0,\n  \"depth\": 1,\n  \"level0\": \"85BBEA6CC462B244\",\n  \"alias\": {\n   \"type\": 0,\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\"\n  },\n  \"parentId\": \"85BBEA6CC462B244\",\n  \"ownerAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"startHeight\": \"laboris deserunt\",\n  \"endHeight\": \"commodo\",\n  \"level1\": \"85BBEA6CC462B244\",\n  \"level2\": \"85BBEA6CC462B244\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "33a78c8a-f39f-49a7-8dc4-18686be17dd3",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "05fc35d5-d287-4586-b0d5-16c3186ffc1f",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "91ccf528-69c8-4449-b699-04966f68336d",
                            "name": "Get namespace merkle information",
                            "request": {
                                "name": "Get namespace merkle information",
                                "description": {
                                    "content": "Gets the namespace merkle for a given namespace identifier.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "namespaces",
                                        ":namespaceId",
                                        "merkle"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "(Required) Namespace identifier.",
                                            "type": "any",
                                            "value": "<hex>",
                                            "key": "namespaceId"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "a71c1faa-6a31-4e9e-900e-006037600199",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d53192e2-05e2-4a85-9b8d-4ca8118981e6",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "14f20944-8f79-4092-a716-303a84e0a9e9",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "namespaces",
                                                ":namespaceId",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "namespaceId"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e7e49056-3d37-49d3-96e3-4c8778d444b7",
                    "name": "Get readable names for a set of namespaces",
                    "request": {
                        "name": "Get readable names for a set of namespaces",
                        "description": {
                            "content": "Returns friendly names for namespaces.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"namespaceIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "586c2f72-bb11-4d33-9f8b-ff9fa4126598",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n },\n {\n  \"id\": \"85BBEA6CC462B244\",\n  \"name\": \"cat\",\n  \"parentId\": \"85BBEA6CC462B244\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c4f3638c-d629-4283-81a0-2eb8c17062aa",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "83f0c864-81d3-406c-9a94-f5dba857ba97",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8b517e5c-2252-4a56-861c-af783f8cafcf",
                    "name": "Get readable names for a set of accountIds",
                    "request": {
                        "name": "Get readable names for a set of accountIds",
                        "description": {
                            "content": "Returns friendly names for accounts.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "account",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"addresses\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "a4bdc736-f3d0-4bc7-b3e1-058e4030109f",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"accountNames\": [\n  {\n   \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  },\n  {\n   \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n   \"names\": [\n    \"alias1\",\n    \"alias2\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "20c0b899-3d0f-4256-9621-bbcb55c0e87c",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fddda900-bd55-4766-a28b-3a4a7f400335",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "account",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "13f78e1a-9106-49e4-a94b-fc31a3cd4632",
                    "name": "Get readable names for a set of mosaics",
                    "request": {
                        "name": "Get readable names for a set of mosaics",
                        "description": {
                            "content": "Returns friendly names for mosaics.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "namespaces",
                                "mosaic",
                                "names"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mosaicIds\": [\n        \"<hex>\",\n        \"<hex>\"\n    ]\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "e996e582-6eb2-45b4-a0e7-27c220ea86a2",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"mosaicNames\": [\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  },\n  {\n   \"mosaicId\": \"0DC67FBE1CAD29E3\",\n   \"names\": [\n    \"symbol.xym\"\n   ]\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "169be02d-7163-45cb-a9be-4359b3303f84",
                            "name": "InvalidContent",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8721daf7-32c2-490a-815f-47a3f95c7ddd",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "namespaces",
                                        "mosaic",
                                        "names"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "POST",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "8f27f292-779d-4424-bb1c-c569753ee139",
            "name": "statements",
            "item": [
                {
                    "id": "0ba0bf2b-c27a-4309-989f-24e54e284c5f",
                    "name": "Search transaction statements",
                    "request": {
                        "name": "Search transaction statements",
                        "description": {
                            "content": "Gets an array of transaction statements.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "statements",
                                "transaction"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "description": "Filter by block height.",
                                    "key": "height",
                                    "value": "dolore sit"
                                },
                                {
                                    "description": "Only blocks with height greater or equal than this one are returned.",
                                    "key": "fromHeight",
                                    "value": "dolore sit"
                                },
                                {
                                    "description": "Only blocks with height smaller or equal than this one are returned.",
                                    "key": "toHeight",
                                    "value": "dolore sit"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by receipt type.\nTo filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.\n",
                                    "key": "receiptType",
                                    "value": "<integer>"
                                },
                                {
                                    "description": "Filter by address of the account receiving the transaction.",
                                    "key": "recipientAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by address sending mosaics.",
                                    "key": "senderAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Filter by target address.",
                                    "key": "targetAddress",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Mosaic or namespace identifier",
                                    "key": "artifactId",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Select the number of entries to return.",
                                    "key": "pageSize",
                                    "value": "10"
                                },
                                {
                                    "description": "Filter by page number.",
                                    "key": "pageNumber",
                                    "value": "1"
                                },
                                {
                                    "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                    "key": "offset",
                                    "value": "<string>"
                                },
                                {
                                    "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                    "key": "order",
                                    "value": "desc"
                                }
                            ],
                            "variable": []
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "475474b3-b1e2-4344-925d-bfc2e2f7447b",
                            "name": "success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"data\": [\n  {\n   \"id\": \"non pariatur incididunt\",\n   \"meta\": {\n    \"timestamp\": \"mollit quis aliqua ut fugiat\"\n   },\n   \"statement\": {\n    \"height\": \"deserunt dolor cillum elit\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  },\n  {\n   \"id\": \"laboris qui\",\n   \"meta\": {\n    \"timestamp\": \"velit dolor consequat\"\n   },\n   \"statement\": {\n    \"height\": \"ea adipisicing\",\n    \"source\": {\n     \"primaryId\": 2222212828,\n     \"secondaryId\": 2222212828\n    }\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 92390940,\n  \"pageSize\": -44142978\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "979d2e29-5ec1-4f0d-a4e5-7e1b81a30d0c",
                            "name": "ResourceNotFound",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "831e45c5-eb04-4748-ae36-fc06ef9019ec",
                            "name": "InvalidArgument",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "statements",
                                        "transaction"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "height",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "fromHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "toHeight",
                                            "value": "non ipsum dolore"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "receiptType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "key": "recipientAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "senderAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "targetAddress",
                                            "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                        },
                                        {
                                            "key": "artifactId",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Conflict",
                            "code": 409,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e2b80ada-9cb2-4905-aad8-376d242a990e",
                    "name": "resolutions",
                    "item": [
                        {
                            "id": "b75f9450-2d48-4f42-9041-d8bdbcb113bc",
                            "name": "Get receipts address resolution statements",
                            "request": {
                                "name": "Get receipts address resolution statements",
                                "description": {
                                    "content": "Gets an array of address resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "address"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "2c5f9ceb-a028-44db-9e28-692c5b2fcf23",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"id consectetur voluptate Duis\",\n   \"meta\": {\n    \"timestamp\": \"nostrud\"\n   },\n   \"statement\": {\n    \"height\": \"incididunt Duis\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"fugiat voluptate\",\n   \"meta\": {\n    \"timestamp\": \"ad dolor Excepteur\"\n   },\n   \"statement\": {\n    \"height\": \"ut nisi\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -74489730,\n  \"pageSize\": 54428468\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f7e0dbed-a4c5-46b8-90e2-837f3522f3b3",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "20429411-dfd0-40cd-a79e-7c1d29e0d76a",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e625f9ac-cd36-456f-a859-c7a5d5e03218",
                            "name": "Get receipts mosaic resolution statements",
                            "request": {
                                "name": "Get receipts mosaic resolution statements",
                                "description": {
                                    "content": "Gets an array of mosaic resolution statements.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "statements",
                                        "resolutions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by block height.",
                                            "key": "height",
                                            "value": "dolore sit"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "3f420e1e-b28e-49b2-bc97-75e3e7063797",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"eiusmod commodo eli\",\n   \"meta\": {\n    \"timestamp\": \"incididunt sint\"\n   },\n   \"statement\": {\n    \"height\": \"quis ipsum\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"ullamco eu\",\n   \"meta\": {\n    \"timestamp\": \"labore incididunt\"\n   },\n   \"statement\": {\n    \"height\": \"ad voluptate\",\n    \"unresolved\": \"85BBEA6CC462B244\",\n    \"resolutionEntries\": [\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"source\": {\n       \"primaryId\": 2222212828,\n       \"secondaryId\": 2222212828\n      },\n      \"resolved\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": -85121501,\n  \"pageSize\": 93422961\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a4cc586b-7835-4da9-bbe5-0550f7c6c040",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0878decd-7928-42f3-b4a1-d767efe05b53",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "statements",
                                                "resolutions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "height",
                                                    "value": "non ipsum dolore"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "fa19af71-d67b-4385-8494-55f41be41d13",
            "name": "restrictions",
            "item": [
                {
                    "id": "50af4087-b041-49eb-9ee6-2e36d3814b28",
                    "name": "account",
                    "item": [
                        {
                            "id": "ac533e1a-66d1-4e77-8c7c-965fbdb4ce73",
                            "name": "Search account restrictions",
                            "request": {
                                "name": "Search account restrictions",
                                "description": {
                                    "content": "Returns an array of account restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "account"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by address involved in the transaction. \nAn account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.\nThis filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.\n",
                                            "key": "address",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "514a7947-8d4d-4b81-b8bd-791b75a0a20f",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  },\n  {\n   \"accountRestrictions\": {\n    \"version\": 1,\n    \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"restrictions\": [\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"restrictionFlags\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"values\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 58898475,\n  \"pageSize\": -19412648\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5394d36a-b31d-452b-afe7-39fb4494eec4",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9691bfbe-8a7c-4243-9ca3-c9c2faf1c209",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "address",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4a76aed7-0850-4368-b80f-004d52239634",
                            "name": "{address}",
                            "item": [
                                {
                                    "id": "29f8805c-4eb0-42ca-afe0-a56c610f406c",
                                    "name": "Get the account restrictions",
                                    "request": {
                                        "name": "Get the account restrictions",
                                        "description": {
                                            "content": "Returns the account restrictions for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "<string>",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "1ca43f26-8341-418b-b540-709ca48c3bb5",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"accountRestrictions\": {\n  \"version\": 1,\n  \"address\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"restrictions\": [\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   },\n   {\n    \"restrictionFlags\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"values\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ]\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "379e0c37-edcf-4f44-bd6d-f24ca5b06030",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "6f7e54f0-b31e-46c1-af2e-60d4a07bcb26",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "a129edfe-a7e3-4cd8-8929-51b623b80779",
                                    "name": "Get the account restrictions merkle",
                                    "request": {
                                        "name": "Get the account restrictions merkle",
                                        "description": {
                                            "content": "Returns the account restrictions merkle for a given address.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "account",
                                                ":address",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Account address.",
                                                    "type": "any",
                                                    "value": "<string>",
                                                    "key": "address"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "a9200d1a-45e9-4bfb-a0ca-dbb6b2903acc",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "ae557327-1299-4de6-ba53-30e139b7d5b3",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "45e80460-81ad-4311-b295-710258481562",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "account",
                                                        ":address",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "address"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "193ac4c4-a8fe-49e4-b2e2-abf4486f82c0",
                    "name": "mosaic",
                    "item": [
                        {
                            "id": "9a35f14b-9d83-4d8b-83e1-8ab5c8fcdf3e",
                            "name": "Search mosaic restrictions",
                            "request": {
                                "name": "Search mosaic restrictions",
                                "description": {
                                    "content": "Returns an array of mosaic restrictions.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "path": [
                                        "restrictions",
                                        "mosaic"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Filter by mosaic identifier.",
                                            "key": "mosaicId",
                                            "value": "<hex>"
                                        },
                                        {
                                            "description": "Filter by entry type.",
                                            "key": "entryType",
                                            "value": "<integer>"
                                        },
                                        {
                                            "description": "Filter by target address.",
                                            "key": "targetAddress",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Select the number of entries to return.",
                                            "key": "pageSize",
                                            "value": "10"
                                        },
                                        {
                                            "description": "Filter by page number.",
                                            "key": "pageNumber",
                                            "value": "1"
                                        },
                                        {
                                            "description": "Entry id at which to start pagination.\nIf the ordering parameter is set to -id, the elements returned precede the identifier.\nOtherwise, newer elements with respect to the id are returned.\n",
                                            "key": "offset",
                                            "value": "<string>"
                                        },
                                        {
                                            "description": "Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.\nIf the request does not specify ``orderBy``, REST returns the collection ordered by id.\n",
                                            "key": "order",
                                            "value": "desc"
                                        }
                                    ],
                                    "variable": []
                                },
                                "method": "GET",
                                "auth": null
                            },
                            "response": [
                                {
                                    "id": "6047b7c4-27fc-44a4-b8cb-263ff3e770fa",
                                    "name": "success",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"data\": [\n  {\n   \"id\": \"occaecat ipsum mollit ex dolor\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  },\n  {\n   \"id\": \"sed officia aliqua dolor enim\",\n   \"mosaicRestrictionEntry\": {\n    \"version\": 1,\n    \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n    \"entryType\": \"<integer>\",\n    \"mosaicId\": \"0DC67FBE1CAD29E3\",\n    \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n    \"restrictions\": [\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     },\n     {\n      \"key\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     }\n    ]\n   }\n  }\n ],\n \"pagination\": {\n  \"pageNumber\": 18307685,\n  \"pageSize\": 40421454\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fd15d19a-78fe-4007-aa18-aa8b69676f13",
                                    "name": "ResourceNotFound",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Not Found",
                                    "code": 404,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "117ab087-3011-4404-9f18-5d8d704a74ee",
                                    "name": "InvalidArgument",
                                    "originalRequest": {
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "mosaicId",
                                                    "value": "0DC67FBE1CAD29E3"
                                                },
                                                {
                                                    "key": "entryType",
                                                    "value": "<integer>"
                                                },
                                                {
                                                    "key": "targetAddress",
                                                    "value": "SAAA244WMCB2JXGNQTQHQOS45TGBFF4V2MJBVOQ"
                                                },
                                                {
                                                    "key": "pageSize",
                                                    "value": "10"
                                                },
                                                {
                                                    "key": "pageNumber",
                                                    "value": "1"
                                                },
                                                {
                                                    "key": "offset",
                                                    "value": "<string>"
                                                },
                                                {
                                                    "key": "order",
                                                    "value": "desc"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "Conflict",
                                    "code": 409,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "844df4a4-5ca9-4875-909f-39cd558c708c",
                            "name": "{composite Hash}",
                            "item": [
                                {
                                    "id": "aa1f99ca-8b5e-4c3c-b13e-0c4f1fc68510",
                                    "name": "Get the mosaic restrictions",
                                    "request": {
                                        "name": "Get the mosaic restrictions",
                                        "description": {
                                            "content": "Returns the mosaic restrictions for a composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "27c0bf06-8f19-43e9-9d3f-93573da59661",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": \"est ut nisi in\",\n \"mosaicRestrictionEntry\": {\n  \"version\": 1,\n  \"compositeHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\",\n  \"entryType\": \"<integer>\",\n  \"mosaicId\": \"0DC67FBE1CAD29E3\",\n  \"targetAddress\": \"9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E0\",\n  \"restrictions\": [\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"key\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ]\n }\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "76cb9a00-677a-46cc-84cc-18d66f1bcdc4",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "81b1f75c-20ef-4c80-912f-f8c73285c4ed",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "159726d6-2c4d-4569-a7f6-9bf9df7a5fdb",
                                    "name": "Get the mosaic restrictions merkle",
                                    "request": {
                                        "name": "Get the mosaic restrictions merkle",
                                        "description": {
                                            "content": "Returns the mosaic restrictions merkle for a given composite hash.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "path": [
                                                "restrictions",
                                                "mosaic",
                                                ":compositeHash",
                                                "merkle"
                                            ],
                                            "host": [
                                                "{{baseUrl}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": "(Required) Filter by composite hash.",
                                                    "type": "any",
                                                    "value": "laboris adipisicing commodo aliqua",
                                                    "key": "compositeHash"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": null
                                    },
                                    "response": [
                                        {
                                            "id": "d2080463-3854-4bf8-b0ac-b882d4cef389",
                                            "name": "success",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"raw\": \"00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1\",\n \"tree\": [\n  {\n   \"type\": 0,\n   \"path\": \"tempor occaecat enim ut sint\",\n   \"encodedPath\": \"qui\",\n   \"nibbleCount\": -61804879,\n   \"linkMask\": \"consectetur fugiat eu aliqua\",\n   \"links\": [\n    {\n     \"bit\": \"ex in nostrud do exercitation\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"aute sint esse\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  },\n  {\n   \"type\": 0,\n   \"path\": \"cillum in est in Excepteur\",\n   \"encodedPath\": \"dolore nulla amet anim veniam\",\n   \"nibbleCount\": -35508015,\n   \"linkMask\": \"dolore nisi dolore minim\",\n   \"links\": [\n    {\n     \"bit\": \"eiusmod\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    },\n    {\n     \"bit\": \"enim dolor n\",\n     \"link\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n    }\n   ],\n   \"branchHash\": \"C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810\"\n  }\n ]\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "7b3649b6-5068-45e7-9647-25570aa18056",
                                            "name": "ResourceNotFound",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Not Found",
                                            "code": 404,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "39f8cf24-12ba-4b61-bd00-f86fc945d51d",
                                            "name": "InvalidArgument",
                                            "originalRequest": {
                                                "url": {
                                                    "path": [
                                                        "restrictions",
                                                        "mosaic",
                                                        ":compositeHash",
                                                        "merkle"
                                                    ],
                                                    "host": [
                                                        "{{baseUrl}}"
                                                    ],
                                                    "query": [],
                                                    "variable": [
                                                        {
                                                            "type": "any",
                                                            "key": "compositeHash"
                                                        }
                                                    ]
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "Conflict",
                                            "code": 409,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"code\": \"sed\",\n \"message\": \"dolore Duis culpa\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "baseUrl",
            "type": "string",
            "value": "http://localhost:3000"
        }
    ],
    "info": {
        "_postman_id": "0ffb76fb-6f26-4238-86c7-6e7629773c69",
        "name": "Catapult REST Endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "OpenAPI Specification of catapult-rest",
            "type": "text/plain"
        }
    }
}